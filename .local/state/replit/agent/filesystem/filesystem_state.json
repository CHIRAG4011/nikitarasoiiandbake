{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_mail import Mail\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Mail configuration\napp.config['MAIL_SERVER'] = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')\napp.config['MAIL_PORT'] = int(os.environ.get('MAIL_PORT', '587'))\napp.config['MAIL_USE_TLS'] = True\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME', '')\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD', '')\napp.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_DEFAULT_SENDER', 'admin@nikitarasoi.com')\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize data store\nfrom data_store import init_data_store\ninit_data_store()\n\n# Import routes\nfrom routes import *\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)\n","size_bytes":1048},"data_store.py":{"content":"from datetime import datetime, timedelta\nfrom werkzeug.security import generate_password_hash\nfrom models import User, Product, Order, Review, Address, VisitorLog, Category\n\n# In-memory data storage\ndata_store = {\n    'users': {},\n    'products': {},\n    'orders': {},\n    'reviews': {},\n    'addresses': {},\n    'categories': {},\n    'visitor_logs': [],\n    'counters': {\n        'user_id': 1,\n        'product_id': 1,\n        'order_id': 1,\n        'review_id': 1,\n        'address_id': 1,\n        'category_id': 1\n    }\n}\n\ndef init_data_store():\n    \"\"\"Initialize the data store with sample data\"\"\"\n    \n    # Create admin user\n    admin_user = User(\n        user_id=1,\n        username='admin',\n        email='admin@nikitarasoi.com',\n        password_hash=generate_password_hash('admin123'),\n        is_admin=True\n    )\n    data_store['users'][1] = admin_user\n    data_store['counters']['user_id'] = 2\n    \n    # Initialize categories\n    categories_data = [\n        {\n            'name': 'Bread',\n            'description': 'Fresh artisan breads, rolls, and baked goods made daily with premium ingredients.',\n            'image_url': 'https://pixabay.com/get/gf46697f3b2eb0f69055e68cf462fe7f12f666a1cef093298d99ac12155b9f9a73786df5c026a3d306610f736380e291652992b984cc3e2305bb1f72dd7b7831a_1280.jpg'\n        },\n        {\n            'name': 'Pastries',\n            'description': 'Buttery, flaky pastries and croissants made with traditional French techniques.',\n            'image_url': 'https://pixabay.com/get/g7fc235a8396e1e878415cdd61ade6fd8a773e2667829a11c6e2118808a681b4abd2a480212ead51ada7e326f7f210cdbe2aac2c1c8a0ce9310ea0497f2c98d88_1280.jpg'\n        },\n        {\n            'name': 'Muffins',\n            'description': 'Moist and fluffy muffins with various flavors and mix-ins to start your day right.',\n            'image_url': 'https://pixabay.com/get/g002d90cded0d0d8029098ba11a7e534bc2a16e58b1b935f8abf23e301924125103d7e7aa0971c7d3b6044f125aace9b89bfa10cb192bce99d1393e0914d96939_1280.jpg'\n        },\n        {\n            'name': 'Desserts',\n            'description': 'Decadent desserts, tarts, and sweet treats perfect for any special occasion.',\n            'image_url': 'https://pixabay.com/get/g686d80765ed6bf3ee31605efc8f64b836790a4a5520e1d6c6612c4093dabbe17dfec22312d97234015f0cd6a400527d092ea3a0603e2b30529c4cd59a2f45308_1280.jpg'\n        }\n    ]\n    \n    for i, category_data in enumerate(categories_data, 1):\n        category = Category(\n            category_id=i,\n            name=category_data['name'],\n            description=category_data['description'],\n            image_url=category_data['image_url']\n        )\n        data_store['categories'][i] = category\n    \n    data_store['counters']['category_id'] = len(categories_data) + 1\n    \n    # Sample products with stock photos\n    products_data = [\n        {\n            'name': 'Artisan Sourdough Bread',\n            'description': 'Traditional sourdough bread made with our signature starter, fermented for 24 hours for that perfect tangy flavor.',\n            'price': 89.99,\n            'category': 'Bread',\n            'image_url': 'https://pixabay.com/get/gf46697f3b2eb0f69055e68cf462fe7f12f666a1cef093298d99ac12155b9f9a73786df5c026a3d306610f736380e291652992b984cc3e2305bb1f72dd7b7831a_1280.jpg',\n            'stock': 15\n        },\n        {\n            'name': 'Fresh Croissants',\n            'description': 'Buttery, flaky croissants made fresh daily with premium French butter. Perfect for breakfast or afternoon tea.',\n            'price': 129.99,\n            'category': 'Pastries',\n            'image_url': 'https://pixabay.com/get/g7fc235a8396e1e878415cdd61ade6fd8a773e2667829a11c6e2118808a681b4abd2a480212ead51ada7e326f7f210cdbe2aac2c1c8a0ce9310ea0497f2c98d88_1280.jpg',\n            'stock': 24\n        },\n        {\n            'name': 'Chocolate Chip Muffins',\n            'description': 'Moist and fluffy muffins loaded with premium chocolate chips. A family favorite!',\n            'price': 159.99,\n            'category': 'Muffins',\n            'image_url': 'https://pixabay.com/get/g002d90cded0d0d8029098ba11a7e534bc2a16e58b1b935f8abf23e301924125103d7e7aa0971c7d3b6044f125aace9b89bfa10cb192bce99d1393e0914d96939_1280.jpg',\n            'stock': 18\n        },\n        {\n            'name': 'Danish Pastries',\n            'description': 'Traditional Danish pastries with various fillings including cream cheese, fruit preserves, and custard.',\n            'price': 189.99,\n            'category': 'Pastries',\n            'image_url': 'https://pixabay.com/get/gaffffc737998f81ca3a19e76aa6ff9177b067d35a05e7f8c25e830c8deac60f5febbf4447fe4bc429641c026c2764c8c508a364e12bc0e06b6a6b6b4196335fd_1280.jpg',\n            'stock': 12\n        },\n        {\n            'name': 'Whole Wheat Rolls',\n            'description': 'Healthy whole wheat dinner rolls, perfect for any meal. Made with organic flour and seeds.',\n            'price': 69.99,\n            'category': 'Bread',\n            'image_url': 'https://pixabay.com/get/ge311c6a94d5e6e9d79f52733a022bfded80843d182c630b20a3b3b4c6df7bb33f610ab05806b5193f036f3cfb9bb1b651bb14c71317129c47140528a6e49e7e6_1280.jpg',\n            'stock': 20\n        },\n        {\n            'name': 'Cinnamon Rolls',\n            'description': 'Soft, gooey cinnamon rolls with cream cheese frosting. Baked fresh every morning.',\n            'price': 149.99,\n            'category': 'Pastries',\n            'image_url': 'https://pixabay.com/get/ge4a523739a8b375a4398fa7e3e9fa0b5fa31395997465b711435e0fd5a022c2ff5e600d688fd11addd7e9b811f542ce892b7db1d407390227e4cfda1bbf477dd_1280.jpg',\n            'stock': 16\n        },\n        {\n            'name': 'Artisan Bagels',\n            'description': 'Hand-rolled bagels available in various flavors: plain, sesame, poppy seed, and everything.',\n            'price': 99.99,\n            'category': 'Bread',\n            'image_url': 'https://pixabay.com/get/g16dc05f5f036ac44088b8762b08a8f4fba9c3d54104d0f05f20405769619f798061a01280002dbcbb5a47914af1b25e6436eb32bcd4cb4682d88c658e14ff435_1280.jpg',\n            'stock': 22\n        },\n        {\n            'name': 'Fruit Tarts',\n            'description': 'Beautiful individual fruit tarts with pastry cream and fresh seasonal fruits.',\n            'price': 229.99,\n            'category': 'Desserts',\n            'image_url': 'https://pixabay.com/get/g686d80765ed6bf3ee31605efc8f64b836790a4a5520e1d6c6612c4093dabbe17dfec22312d97234015f0cd6a400527d092ea3a0603e2b30529c4cd59a2f45308_1280.jpg',\n            'stock': 8\n        }\n    ]\n    \n    for i, product_data in enumerate(products_data, 1):\n        product = Product(\n            product_id=i,\n            name=product_data['name'],\n            description=product_data['description'],\n            price=product_data['price'],\n            category=product_data['category'],\n            image_url=product_data['image_url'],\n            stock=product_data['stock']\n        )\n        data_store['products'][i] = product\n    \n    data_store['counters']['product_id'] = len(products_data) + 1\n\ndef get_next_id(counter_name):\n    \"\"\"Get next available ID for a given counter\"\"\"\n    current_id = data_store['counters'][counter_name]\n    data_store['counters'][counter_name] += 1\n    return current_id\n\ndef add_visitor_log(ip_address, user_agent, page=None):\n    \"\"\"Add a visitor log entry\"\"\"\n    visitor_log = VisitorLog(ip_address, user_agent, page)\n    data_store['visitor_logs'].append(visitor_log)\n\ndef get_daily_visitors():\n    \"\"\"Get visitor count for today\"\"\"\n    today = datetime.now().date()\n    daily_visitors = [log for log in data_store['visitor_logs'] \n                     if log.timestamp.date() == today]\n    return len(set(log.ip_address for log in daily_visitors))\n\ndef get_weekly_visitors():\n    \"\"\"Get visitor data for the past week\"\"\"\n    week_ago = datetime.now() - timedelta(days=7)\n    weekly_data = {}\n    \n    for i in range(7):\n        date = (week_ago + timedelta(days=i)).date()\n        daily_logs = [log for log in data_store['visitor_logs'] \n                     if log.timestamp.date() == date]\n        weekly_data[date.strftime('%Y-%m-%d')] = len(set(log.ip_address for log in daily_logs))\n    \n    return weekly_data\n","size_bytes":8220},"main.py":{"content":"from app import app\n","size_bytes":20},"models.py":{"content":"from datetime import datetime\nfrom werkzeug.security import check_password_hash\n\nclass User:\n    def __init__(self, user_id, username, email, password_hash, is_admin=False, created_at=None):\n        self.id = user_id\n        self.username = username\n        self.email = email\n        self.password_hash = password_hash\n        self.is_admin = is_admin\n        self.created_at = created_at or datetime.now()\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def is_authenticated(self):\n        return True\n    \n    def is_active(self):\n        return True\n    \n    def is_anonymous(self):\n        return False\n    \n    def get_id(self):\n        return str(self.id)\n\nclass Product:\n    def __init__(self, product_id, name, description, price, category, image_url, stock=0, created_at=None):\n        self.id = product_id\n        self.name = name\n        self.description = description\n        self.price = float(price)\n        self.category = category\n        self.image_url = image_url\n        self.stock = int(stock)\n        self.created_at = created_at or datetime.now()\n    \n    def get_average_rating(self):\n        from data_store import data_store\n        reviews = [r for r in data_store['reviews'].values() if r.product_id == self.id]\n        if not reviews:\n            return 0\n        return sum(review.rating for review in reviews) / len(reviews)\n\nclass Order:\n    def __init__(self, order_id, user_id, total, shipping_address, status='pending', items=None, created_at=None):\n        self.id = order_id\n        self.user_id = user_id\n        self.total = float(total)\n        self.shipping_address = shipping_address\n        self.status = status\n        self.created_at = created_at or datetime.now()\n        self.updated_at = self.created_at\n        self.items = items or []  # List of order items\n    \n    def update_status(self, new_status):\n        self.status = new_status\n        self.updated_at = datetime.now()\n\nclass OrderItem:\n    def __init__(self, order_id, product_id, quantity, price):\n        self.order_id = order_id\n        self.product_id = product_id\n        self.quantity = int(quantity)\n        self.price = float(price)\n\nclass Review:\n    def __init__(self, review_id, product_id, user_id, rating, comment, created_at=None):\n        self.id = review_id\n        self.product_id = product_id\n        self.user_id = user_id\n        self.rating = int(rating)\n        self.comment = comment\n        self.created_at = created_at or datetime.now()\n\nclass Category:\n    def __init__(self, category_id, name, description=\"\", image_url=\"\", is_active=True, created_at=None):\n        self.id = category_id\n        self.name = name\n        self.description = description\n        self.image_url = image_url\n        self.is_active = is_active\n        self.created_at = created_at or datetime.now()\n    \n    def get_product_count(self):\n        from data_store import data_store\n        return len([p for p in data_store['products'].values() if p.category == self.name])\n\nclass Address:\n    def __init__(self, address_id, user_id, name, street, city, state, zip_code, phone=None, created_at=None):\n        self.id = address_id\n        self.user_id = user_id\n        self.name = name\n        self.street = street\n        self.city = city\n        self.state = state\n        self.zip_code = zip_code\n        self.phone = phone\n        self.created_at = created_at or datetime.now()\n\nclass VisitorLog:\n    def __init__(self, ip_address, user_agent, page=None, timestamp=None):\n        self.ip_address = ip_address\n        self.user_agent = user_agent\n        self.page = page\n        self.timestamp = timestamp or datetime.now()\n\nclass CartItem:\n    def __init__(self, product_id, quantity, price):\n        self.product_id = product_id\n        self.quantity = int(quantity)\n        self.price = float(price)\n    \n    def get_total(self):\n        return self.quantity * self.price\n","size_bytes":3962},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-mail>=0.10.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-login>=0.6.3\",\n    \"werkzeug>=3.1.3\",\n    \"flask-dance>=7.1.0\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n]\n","size_bytes":425},"replit.md":{"content":"# NIKITA RASOI & BAKES\n\n## Overview\n\nNIKITA RASOI & BAKES is a Flask-based e-commerce web application for an online bakery business. The application provides a complete shopping experience with product browsing, cart management, order placement, user authentication, and admin management capabilities. It features a warm, bakery-themed design with brown and cream color schemes, product catalogs with search and filtering, shopping cart functionality, order tracking, user profile management, and comprehensive admin tools for managing products, orders, and analytics. The application has been fully rebranded from \"Sweet Crumbs Bakery\" to \"NIKITA RASOI & BAKES\" and converted to use Indian Rupee (INR) currency throughout.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Flask for server-side rendering\n- **CSS Framework**: Bootstrap 5 for responsive design and UI components\n- **Custom Styling**: CSS custom properties for consistent bakery theme (brown/cream color palette)\n- **JavaScript**: Vanilla JavaScript for cart management and interactive features\n- **Icon Library**: Font Awesome for consistent iconography\n\n### Backend Architecture\n- **Web Framework**: Flask with modular route organization\n- **Session Management**: Flask sessions for cart persistence and user authentication\n- **Email System**: Flask-Mail for order confirmations and notifications\n- **Data Models**: Object-oriented models for User, Product, Order, Review, and Address entities\n- **Authentication**: Werkzeug password hashing with session-based user management\n- **Middleware**: ProxyFix for handling reverse proxy headers\n\n### Data Storage\n- **Primary Storage**: In-memory data store using Python dictionaries\n- **Data Structure**: Hierarchical dictionary structure for users, products, orders, reviews, addresses, and visitor logs\n- **Auto-incrementing IDs**: Counter-based ID generation for all entities\n- **Session Storage**: Flask sessions for cart data and user authentication state\n\n### Application Structure\n- **Modular Design**: Separated concerns with distinct files for routes, models, utilities, and data management\n- **Template Hierarchy**: Base template with extending child templates for consistent layout\n- **Static Assets**: Organized CSS and JavaScript files for frontend functionality\n- **Admin Interface**: Dedicated admin templates and routes for business management\n\n### Security Features\n- **Password Security**: Werkzeug password hashing for secure credential storage\n- **Session Security**: Configurable session secret key with environment variable support\n- **Input Validation**: Form validation and sanitization throughout the application\n- **Access Control**: Role-based access with admin user privileges\n\n## External Dependencies\n\n### Python Packages\n- **Flask**: Core web framework for routing and request handling\n- **Flask-Mail**: Email sending capabilities for order confirmations\n- **Werkzeug**: Password hashing and WSGI utilities\n\n### Frontend Libraries\n- **Bootstrap 5**: CSS framework loaded via CDN for responsive design\n- **Font Awesome 6**: Icon library loaded via CDN for UI elements\n- **Chart.js**: JavaScript charting library for admin analytics dashboard\n- **Currency Formatting**: JavaScript uses Intl.NumberFormat with en-IN locale for Indian Rupee formatting\n\n### Email Service\n- **SMTP Configuration**: Configurable mail server settings (defaults to Gmail SMTP)\n- **Environment Variables**: MAIL_SERVER, MAIL_PORT, MAIL_USERNAME, MAIL_PASSWORD, MAIL_DEFAULT_SENDER\n- **Email Templates**: Order confirmation emails using NIKITA RASOI & BAKES branding and INR currency formatting\n\n### Image Resources\n- **Pixabay**: External image hosting for product photos and bakery imagery\n- **Stock Photos**: Placeholder images for products and promotional content\n\n### Development Tools\n- **Environment Configuration**: Development vs production settings via environment variables\n- **Debug Mode**: Flask debug mode for development with hot reloading\n- **Logging**: Python logging module for application monitoring and debugging\n\n## Recent Changes (August 2025)\n\n### Complete Rebranding and Currency Conversion\n- **Business Name**: Changed from \"Sweet Crumbs Bakery\" to \"NIKITA RASOI & BAKES\" across all templates, JavaScript files, and email content\n- **Currency Conversion**: Full conversion from USD ($) to Indian Rupee (₹) throughout the application\n- **Product Pricing**: Updated all product prices to appropriate INR values (multiplied by ~10x for realistic Indian pricing)\n- **Delivery Fees**: Updated from $5.00 to ₹50.00, free delivery threshold changed from $50 to ₹500\n- **Tax Rates**: Updated from 8.5% US tax to 18% Indian GST rate\n- **Admin Email**: Changed from admin@sweetcrumbsbakery.com to admin@nikitarasoi.com\n- **JavaScript Localization**: Updated currency formatting to use en-IN locale with INR currency\n- **Template Fixes**: Fixed analytics template slicing and undefined variable errors\n\n### Major Database Architecture Conversion (August 8, 2025)\n- **Database Migration**: Successfully converted from PostgreSQL/SQLAlchemy to in-memory data storage using data_store.py\n- **Model Updates**: Updated all data models (User, Product, Order, Review, Address) to work with in-memory storage\n- **Route Fixes**: Systematically updated all 40+ routes to use data_store instead of SQLAlchemy queries\n- **Error Resolution**: Reduced LSP diagnostics from 40+ critical errors to just 1 false positive\n- **Template Context**: Added data_store to template context to fix undefined variable errors\n- **Cart Functionality**: Fixed cart clearing after order placement\n- **Admin Panel**: Fixed order details display and user management in admin dashboard\n\n### Enhanced Product Management (August 8, 2025)\n- **Full Product Customization**: Added complete product editing functionality with modal interface\n- **Admin Product Editor**: Implemented edit product modal with all fields (name, description, price, category, image, stock)\n- **Validation**: Added proper form validation and user feedback for product operations\n- **Required Address**: Made address field required during checkout with proper validation\n- **Price Display**: Updated all admin panels to show prices in INR (₹) format\n\n### JavaScript and User Experience Fixes (August 8, 2025)\n- **Error Resolution**: Fixed JavaScript errors including missing handleDropdownToggle and initializeCharts functions\n- **Chart Integration**: Added proper Chart.js integration for admin analytics dashboard\n- **Bootstrap Compatibility**: Fixed dropdown functionality to work with Bootstrap 5\n- **Modal Enhancements**: Enhanced product edit modal with proper data binding and validation\n- **User Feedback**: Improved form submission feedback and error handling throughout the application\n\n### Analytics and JSON Serialization Fixes (August 8, 2025)\n- **Analytics Page Fix**: Resolved JSON serialization error with Order objects in analytics charts\n- **Chart Data**: Updated analytics page to properly serialize order data for JavaScript charts\n- **Template Fixes**: Fixed remaining Jinja2 template syntax issues throughout the application\n\n### Cart and Order Management Fix (August 8, 2025)\n- **Order Placement Issue Resolution**: Fixed critical bug where orders weren't being created due to strict address validation\n- **Cart Clearing Fix**: Resolved issue where shopping cart wasn't being cleared after successful order placement\n- **Address Validation Enhancement**: Added proper form validation requiring delivery address before order placement\n- **JavaScript Validation**: Implemented client-side address validation with user-friendly error messages\n- **Order Display Fix**: Confirmed orders now properly appear in user's \"My Orders\" page after placement\n\n### Complete Currency Conversion to INR (August 8, 2025)\n- **Template Currency Update**: Replaced all remaining dollar ($) symbols with Indian Rupee (₹) symbols across all templates\n- **JavaScript Currency Fix**: Updated cart.js to properly handle INR currency formatting and calculations\n- **Admin Dashboard Currency**: Changed revenue display icons from dollar-sign to rupee-sign in admin analytics\n- **Price Display Consistency**: Ensured all product prices, order totals, and financial displays use INR consistently\n- **Cart Functionality**: Fixed cart total calculations to properly work with INR currency symbols\n\n### Product Category System Implementation (August 9, 2025)\n- **Category Model**: Added comprehensive Category model with description, image, and active status fields\n- **Admin Category Management**: Implemented full CRUD operations including add, edit, delete, and toggle active status\n- **Customer Category Pages**: Created attractive category browsing and individual category product pages\n- **Dynamic Category Integration**: Updated product forms to use database categories instead of hardcoded options\n- **Navigation Enhancement**: Added Categories link to main navigation menu\n- **Admin Dashboard Integration**: Added category management access to admin quick actions\n- **Product Filtering**: Enhanced product filtering to work with dynamic database categories\n- **Delete Functionality**: Added delete capabilities for both categories and products with safety checks\n- **Data Integrity**: Categories with products cannot be deleted; product deletion removes associated reviews\n\n### Deployment Documentation (August 8, 2025)\n- **Comprehensive Deployment Guide**: Created extensive DEPLOYMENT_GUIDE.md with 890+ lines covering local and free hosting\n- **Multiple Platform Support**: Detailed instructions for 6 hosting platforms (Replit, Railway, Render, Fly.io, Vercel, PythonAnywhere)\n- **Local Development**: 3 different setup methods with step-by-step instructions for beginners and developers\n- **Configuration Files**: Complete set including Procfile, runtime.txt, .env.example, app.json, Dockerfile, and .dockerignore\n- **Production Considerations**: Security headers, database options, email services, performance optimization, and scaling\n- **Troubleshooting Guide**: Comprehensive troubleshooting covering local development, deployment issues, and platform-specific problems\n- **Quick Start Summary**: Easy-to-follow deployment instructions for different skill levels and hosting preferences\n\n","size_bytes":10398},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, jsonify\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import app\nfrom models import User, Product, Order, Review, Address, OrderItem, VisitorLog, Category\nfrom data_store import data_store, add_visitor_log, get_next_id, get_weekly_visitors\nfrom utils import (get_current_user, add_to_cart, remove_from_cart, update_cart_quantity, \n                  get_cart_total, get_cart_count, clear_cart, send_order_confirmation_email,\n                  calculate_order_stats, search_products, get_cart)\nimport logging\nfrom datetime import datetime\n\n@app.before_request\ndef log_visitor():\n    \"\"\"Log visitor information\"\"\"\n    if request.endpoint not in ['static']:\n        try:\n            add_visitor_log(\n                request.remote_addr,\n                request.headers.get('User-Agent', ''),\n                request.endpoint\n            )\n        except Exception as e:\n            # If visitor logging fails, don't break the app\n            logging.warning(f\"Failed to log visitor: {e}\")\n\n@app.context_processor\ndef inject_globals():\n    \"\"\"Inject global variables into templates\"\"\"\n    return {\n        'current_user': get_current_user(),\n        'cart_count': get_cart_count(),\n        'cart_total': get_cart_total(),\n        'data_store': data_store\n    }\n\n@app.route('/')\ndef index():\n    \"\"\"Home page\"\"\"\n    # Get first 6 products as featured\n    featured_products = list(data_store['products'].values())[:6]\n    return render_template('index.html', featured_products=featured_products)\n\n@app.route('/products')\ndef products():\n    \"\"\"Products page with search and filter\"\"\"\n    query = request.args.get('q', '')\n    category = request.args.get('category', 'all')\n    \n    if query or category != 'all':\n        product_list = search_products(query, category)\n    else:\n        product_list = list(data_store['products'].values())\n    \n    # Get categories from data store\n    categories = [cat.name for cat in data_store['categories'].values() if cat.is_active]\n    \n    return render_template('products.html', \n                         products=product_list, \n                         categories=categories,\n                         current_query=query,\n                         current_category=category)\n\n@app.route('/categories')\ndef categories():\n    \"\"\"Categories page showing all available categories\"\"\"\n    active_categories = [cat for cat in data_store['categories'].values() if cat.is_active]\n    return render_template('categories.html', categories=active_categories)\n\n@app.route('/category/<category_name>')\ndef category_products(category_name):\n    \"\"\"Show products for a specific category\"\"\"\n    # Get the category object\n    category = None\n    for cat in data_store['categories'].values():\n        if cat.name == category_name and cat.is_active:\n            category = cat\n            break\n    \n    if not category:\n        flash('Category not found.', 'error')\n        return redirect(url_for('products'))\n    \n    # Get products for this category\n    category_products = [p for p in data_store['products'].values() if p.category == category_name]\n    \n    return render_template('category_products.html', \n                         category=category, \n                         products=category_products)\n\n@app.route('/product/<int:product_id>')\ndef product_detail(product_id):\n    \"\"\"Product detail page\"\"\"\n    product = data_store['products'].get(product_id)\n    if not product:\n        from flask import abort\n        abort(404)\n    \n    # Get reviews for this product\n    product_reviews = [r for r in data_store['reviews'].values() if r.product_id == product_id]\n    \n    return render_template('product_detail.html', product=product, reviews=product_reviews)\n\n@app.route('/add_to_cart/<int:product_id>', methods=['POST'])\ndef add_to_cart_route(product_id):\n    \"\"\"Add item to cart\"\"\"\n    quantity = int(request.form.get('quantity', 1))\n    \n    if add_to_cart(product_id, quantity):\n        flash('Item added to cart!', 'success')\n    else:\n        flash('Unable to add item to cart. Please check availability.', 'error')\n    \n    return redirect(request.referrer or url_for('products'))\n\n@app.route('/cart')\ndef cart():\n    \"\"\"Shopping cart page\"\"\"\n    cart_items = []\n    cart_data = get_cart()\n    \n    for product_id_str, item_data in cart_data.items():\n        product_id = int(product_id_str)\n        product = data_store['products'].get(product_id)\n        if product:\n            cart_items.append({\n                'product': product,\n                'quantity': item_data['quantity'],\n                'total': item_data['quantity'] * item_data['price']\n            })\n    \n    return render_template('cart.html', cart_items=cart_items)\n\n@app.route('/update_cart', methods=['POST'])\ndef update_cart():\n    \"\"\"Update cart quantities\"\"\"\n    product_id = int(request.form.get('product_id', '0'))\n    quantity = int(request.form.get('quantity', '1'))\n    \n    if update_cart_quantity(product_id, quantity):\n        flash('Cart updated!', 'success')\n    else:\n        flash('Unable to update cart.', 'error')\n    \n    return redirect(url_for('cart'))\n\n@app.route('/remove_from_cart/<int:product_id>')\ndef remove_from_cart_route(product_id):\n    \"\"\"Remove item from cart\"\"\"\n    if remove_from_cart(product_id):\n        flash('Item removed from cart!', 'success')\n    else:\n        flash('Unable to remove item.', 'error')\n    \n    return redirect(url_for('cart'))\n\n@app.route('/checkout')\ndef checkout():\n    \"\"\"Checkout page\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('Please login to checkout.', 'error')\n        return redirect(url_for('login'))\n    \n    cart_data = get_cart()\n    if not cart_data:\n        flash('Your cart is empty.', 'error')\n        return redirect(url_for('cart'))\n    \n    # Get user addresses\n    user_addresses = [addr for addr in data_store['addresses'].values() \n                     if addr.user_id == user.id]\n    \n    return render_template('checkout.html', addresses=user_addresses)\n\n@app.route('/place_order', methods=['POST'])\ndef place_order():\n    \"\"\"Place an order\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('Please login to place an order.', 'error')\n        return redirect(url_for('login'))\n    \n    cart_data = get_cart()\n    if not cart_data:\n        flash('Your cart is empty.', 'error')\n        return redirect(url_for('cart'))\n    \n    # Get shipping address\n    address_id = request.form.get('address_id')\n    new_address = request.form.get('new_address')\n    \n    if address_id:\n        address = data_store['addresses'].get(int(address_id))\n        if address:\n            shipping_address = f\"{address.name}, {address.street}, {address.city}, {address.state} {address.zip_code}\"\n        else:\n            flash('Selected address not found.', 'error')\n            return redirect(url_for('checkout'))\n    elif new_address and new_address.strip():\n        shipping_address = new_address.strip()\n    else:\n        flash('Please provide a delivery address to continue.', 'error')\n        return redirect(url_for('checkout'))\n    \n    # Create order items\n    order_items = []\n    total = 0\n    \n    for product_id_str, item_data in cart_data.items():\n        product_id = int(product_id_str)\n        product = data_store['products'].get(product_id)\n        \n        if not product or product.stock < item_data['quantity']:\n            flash(f'Insufficient stock for {product.name if product else \"unknown item\"}.', 'error')\n            return redirect(url_for('cart'))\n        \n        order_items.append({\n            'product_id': product_id,\n            'quantity': item_data['quantity'],\n            'price': item_data['price']\n        })\n        total += item_data['quantity'] * item_data['price']\n        \n        # Update stock\n        product.stock -= item_data['quantity']\n    \n    # Create order\n    order_id = get_next_id('order_id')\n    order = Order(\n        order_id=order_id,\n        user_id=user.id,\n        items=order_items,\n        total=total,\n        shipping_address=shipping_address,\n        status='confirmed'\n    )\n    \n    data_store['orders'][order_id] = order\n    \n    # Send confirmation email (but catch any errors)\n    try:\n        send_order_confirmation_email(user.email, order)\n    except Exception as e:\n        # Continue anyway, don't let email failure stop order placement\n        pass\n    \n    # Clear cart\n    clear_cart()\n    \n    flash(f'Order #{order_id} placed successfully! Confirmation email sent.', 'success')\n    return redirect(url_for('order_tracking', order_id=order_id))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"User registration\"\"\"\n    if request.method == 'POST':\n        username = request.form.get('username')\n        email = request.form.get('email')\n        password = request.form.get('password')\n        confirm_password = request.form.get('confirm_password')\n        \n        # Validation\n        if not all([username, email, password, confirm_password]):\n            flash('All fields are required.', 'error')\n            return render_template('auth/register.html')\n        \n        if password != confirm_password:\n            flash('Passwords do not match.', 'error')\n            return render_template('auth/register.html')\n        \n        # Check if user exists\n        existing_user = None\n        for user_obj in data_store['users'].values():\n            if user_obj.username == username or user_obj.email == email:\n                existing_user = user_obj\n                break\n        \n        if existing_user:\n            flash('Username or email already exists.', 'error')\n            return render_template('auth/register.html')\n        \n        # Create user\n        from data_store import get_next_id\n        user_id = get_next_id('user_id')\n        user = User(\n            user_id=user_id,\n            username=username,\n            email=email,\n            password_hash=generate_password_hash(password or '')\n        )\n        \n        data_store['users'][user_id] = user\n        flash('Registration successful! Please login.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('auth/register.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if request.method == 'POST':\n        username = request.form.get('username')\n        password = request.form.get('password')\n        \n        # Find user\n        user = None\n        for user_obj in data_store['users'].values():\n            if user_obj.username == username or user_obj.email == username:\n                user = user_obj\n                break\n        \n        if user and user.check_password(password):\n            session['user_id'] = user.id\n            flash('Login successful!', 'success')\n            \n            next_page = request.args.get('next')\n            return redirect(next_page or url_for('index'))\n        else:\n            flash('Invalid username/email or password.', 'error')\n    \n    return render_template('auth/login.html')\n\n@app.route('/logout')\ndef logout():\n    \"\"\"User logout\"\"\"\n    session.pop('user_id', None)\n    session.pop('cart', None)\n    flash('Logged out successfully.', 'success')\n    return redirect(url_for('index'))\n\n@app.route('/profile')\ndef profile():\n    \"\"\"User profile page\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('Please login to view your profile.', 'error')\n        return redirect(url_for('login'))\n    \n    # Get user addresses\n    user_addresses = [addr for addr in data_store['addresses'].values() if addr.user_id == user.id]\n    \n    return render_template('user/profile.html', addresses=user_addresses)\n\n@app.route('/add_address', methods=['POST'])\ndef add_address():\n    \"\"\"Add a new address\"\"\"\n    user = get_current_user()\n    if not user:\n        return redirect(url_for('login'))\n    \n    from data_store import get_next_id\n    address_id = get_next_id('address_id')\n    address = Address(\n        address_id=address_id,\n        user_id=user.id,\n        name=request.form.get('name'),\n        street=request.form.get('street'),\n        city=request.form.get('city'),\n        state=request.form.get('state'),\n        zip_code=request.form.get('zip_code')\n    )\n    \n    data_store['addresses'][address_id] = address\n    flash('Address added successfully!', 'success')\n    return redirect(url_for('profile'))\n\n@app.route('/orders')\ndef user_orders():\n    \"\"\"User orders page\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('Please login to view your orders.', 'error')\n        return redirect(url_for('login'))\n    \n    user_orders_list = [order for order in data_store['orders'].values() if order.user_id == user.id]\n    \n    user_orders_list.sort(key=lambda x: x.created_at, reverse=True)\n    \n    return render_template('user/orders.html', orders=user_orders_list)\n\n@app.route('/order/<int:order_id>')\ndef order_tracking(order_id):\n    \"\"\"Order tracking page\"\"\"\n    order = data_store['orders'].get(order_id)\n    if not order:\n        flash('Order not found.', 'error')\n        return redirect(url_for('user_orders'))\n    \n    user = get_current_user()\n    if not user or (order.user_id != user.id and not user.is_admin):\n        flash('Unauthorized access.', 'error')\n        return redirect(url_for('index'))\n    \n    # Get order items with product details\n    order_items = []\n    for item in order.items:\n        product = data_store['products'].get(item['product_id'])\n        if product:\n            order_items.append({\n                'product': product,\n                'quantity': item['quantity'],\n                'price': item['price'],\n                'total': item['quantity'] * item['price']\n            })\n    \n    return render_template('user/order_detail.html', order=order, order_items=order_items)\n\n@app.route('/add_review/<int:product_id>', methods=['POST'])\ndef add_review(product_id):\n    \"\"\"Add a product review\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('Please login to add a review.', 'error')\n        return redirect(url_for('login'))\n    \n    rating = int(request.form.get('rating', '1'))\n    comment = request.form.get('comment')\n    \n    from data_store import get_next_id\n    review_id = get_next_id('review_id')\n    review = Review(\n        review_id=review_id,\n        product_id=product_id,\n        user_id=user.id,\n        rating=rating,\n        comment=comment\n    )\n    \n    data_store['reviews'][review_id] = review\n    flash('Review added successfully!', 'success')\n    return redirect(url_for('product_detail', product_id=product_id))\n\n# Admin routes\n@app.route('/admin')\ndef admin_dashboard():\n    \"\"\"Admin dashboard\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    stats = calculate_order_stats()\n    from data_store import get_daily_visitors\n    daily_visitors = get_daily_visitors()\n    recent_orders = list(data_store['orders'].values())\n    recent_orders.sort(key=lambda x: x.created_at, reverse=True)\n    recent_orders = recent_orders[:10]\n    \n    return render_template('admin/dashboard.html', \n                         stats=stats, \n                         daily_visitors=daily_visitors,\n                         recent_orders=recent_orders)\n\n@app.route('/admin/products')\ndef admin_products():\n    \"\"\"Admin products management\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    products = list(data_store['products'].values())\n    categories = list(data_store['categories'].values())\n    return render_template('admin/products.html', products=products, categories=categories)\n\n@app.route('/admin/add_product', methods=['POST'])\ndef admin_add_product():\n    \"\"\"Add a new product\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        return redirect(url_for('index'))\n    \n    product_id = get_next_id('product_id')\n    product = Product(\n        product_id=product_id,\n        name=request.form.get('name'),\n        description=request.form.get('description'),\n        price=float(request.form.get('price', '0')),\n        category=request.form.get('category'),\n        image_url=request.form.get('image_url'),\n        stock=int(request.form.get('stock', '0'))\n    )\n    \n    data_store['products'][product_id] = product\n    flash('Product added successfully!', 'success')\n    return redirect(url_for('admin_products'))\n\n@app.route('/admin/update_stock/<int:product_id>', methods=['POST'])\ndef admin_update_stock(product_id):\n    \"\"\"Update product stock\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        return redirect(url_for('index'))\n    \n    product = data_store['products'].get(product_id)\n    if product:\n        product.stock = int(request.form.get('stock', '0'))\n        flash('Stock updated successfully!', 'success')\n    \n    return redirect(url_for('admin_products'))\n\n@app.route('/admin/edit_product', methods=['POST'])\ndef admin_edit_product():\n    \"\"\"Edit an existing product\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        return redirect(url_for('index'))\n    \n    product_id_str = request.form.get('product_id')\n    if not product_id_str:\n        flash('Product ID is required.', 'error')\n        return redirect(url_for('admin_products'))\n    product_id = int(product_id_str)\n    product = data_store['products'].get(product_id)\n    \n    if product:\n        product.name = request.form.get('name')\n        product.description = request.form.get('description')\n        product.price = float(request.form.get('price', '0'))\n        product.category = request.form.get('category')\n        product.image_url = request.form.get('image_url')\n        product.stock = int(request.form.get('stock', '0'))\n        flash('Product updated successfully!', 'success')\n    \n    return redirect(url_for('admin_products'))\n\n@app.route('/admin/orders')\ndef admin_orders():\n    \"\"\"Admin orders management\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    orders = list(data_store['orders'].values())\n    orders.sort(key=lambda x: x.created_at, reverse=True)\n    \n    return render_template('admin/orders.html', orders=orders)\n\n@app.route('/admin/update_order_status/<int:order_id>', methods=['POST'])\ndef admin_update_order_status(order_id):\n    \"\"\"Update order status\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        return redirect(url_for('index'))\n    \n    order = data_store['orders'].get(order_id)\n    if order:\n        new_status = request.form.get('status')\n        order.update_status(new_status)\n        flash('Order status updated successfully!', 'success')\n    \n    return redirect(url_for('admin_orders'))\n\n@app.route('/admin/analytics')\ndef admin_analytics():\n    \"\"\"Admin analytics page\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    weekly_visitors = get_weekly_visitors()\n    stats = calculate_order_stats()\n    \n    return render_template('admin/analytics.html', \n                         weekly_visitors=weekly_visitors,\n                         stats=stats)\n\n# Admin User Management\n@app.route('/admin/users')\ndef admin_users():\n    \"\"\"Admin user management\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    users = list(data_store['users'].values())\n    return render_template('admin/users.html', users=users)\n\n@app.route('/admin/categories')\ndef admin_categories():\n    \"\"\"Admin category management\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    categories = list(data_store['categories'].values())\n    return render_template('admin/categories.html', categories=categories)\n\n@app.route('/admin/add_category', methods=['GET', 'POST'])\ndef admin_add_category():\n    \"\"\"Add new category\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    if request.method == 'POST':\n        name = request.form.get('name', '').strip()\n        description = request.form.get('description', '').strip()\n        image_url = request.form.get('image_url', '').strip()\n        \n        if not name:\n            flash('Category name is required.', 'error')\n            return render_template('admin/add_category.html')\n        \n        # Check if category name already exists\n        existing_category = None\n        for cat in data_store['categories'].values():\n            if cat.name.lower() == name.lower():\n                existing_category = cat\n                break\n        \n        if existing_category:\n            flash('Category with this name already exists.', 'error')\n            return render_template('admin/add_category.html')\n        \n        # Create new category\n        category_id = get_next_id('category_id')\n        new_category = Category(\n            category_id=category_id,\n            name=name,\n            description=description,\n            image_url=image_url\n        )\n        \n        data_store['categories'][category_id] = new_category\n        flash(f'Category \"{name}\" added successfully!', 'success')\n        return redirect(url_for('admin_categories'))\n    \n    return render_template('admin/add_category.html')\n\n@app.route('/admin/edit_category/<int:category_id>', methods=['GET', 'POST'])\ndef admin_edit_category(category_id):\n    \"\"\"Edit existing category\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    category = data_store['categories'].get(category_id)\n    if not category:\n        flash('Category not found.', 'error')\n        return redirect(url_for('admin_categories'))\n    \n    if request.method == 'POST':\n        name = request.form.get('name', '').strip()\n        description = request.form.get('description', '').strip()\n        image_url = request.form.get('image_url', '').strip()\n        is_active = request.form.get('is_active') == 'on'\n        \n        if not name:\n            flash('Category name is required.', 'error')\n            return render_template('admin/edit_category.html', category=category)\n        \n        # Check if category name already exists (excluding current category)\n        existing_category = None\n        for cat in data_store['categories'].values():\n            if cat.name.lower() == name.lower() and cat.id != category_id:\n                existing_category = cat\n                break\n        \n        if existing_category:\n            flash('Category with this name already exists.', 'error')\n            return render_template('admin/edit_category.html', category=category)\n        \n        # Update category\n        category.name = name\n        category.description = description\n        category.image_url = image_url\n        category.is_active = is_active\n        \n        flash(f'Category \"{name}\" updated successfully!', 'success')\n        return redirect(url_for('admin_categories'))\n    \n    return render_template('admin/edit_category.html', category=category)\n\n@app.route('/admin/toggle_category_status/<int:category_id>', methods=['POST'])\ndef admin_toggle_category_status(category_id):\n    \"\"\"Toggle category active status\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    category = data_store['categories'].get(category_id)\n    if not category:\n        flash('Category not found.', 'error')\n        return redirect(url_for('admin_categories'))\n    \n    category.is_active = not category.is_active\n    status = \"activated\" if category.is_active else \"deactivated\"\n    flash(f'Category \"{category.name}\" {status} successfully!', 'success')\n    \n    return redirect(url_for('admin_categories'))\n\n@app.route('/admin/delete_category/<int:category_id>', methods=['POST', 'GET'])\ndef admin_delete_category(category_id):\n    \"\"\"Delete a category\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    category = data_store['categories'].get(category_id)\n    if not category:\n        flash('Category not found.', 'error')\n        return redirect(url_for('admin_categories'))\n    \n    # Check if category has products\n    products_in_category = [p for p in data_store['products'].values() if p.category == category.name]\n    if products_in_category:\n        flash(f'Cannot delete category \"{category.name}\" because it contains {len(products_in_category)} products. Please move or delete these products first.', 'error')\n        return redirect(url_for('admin_categories'))\n    \n    # Delete the category\n    category_name = category.name\n    del data_store['categories'][category_id]\n    flash(f'Category \"{category_name}\" deleted successfully!', 'success')\n    \n    return redirect(url_for('admin_categories'))\n\n@app.route('/admin/delete_product/<int:product_id>', methods=['POST'])\ndef admin_delete_product(product_id):\n    \"\"\"Delete a product\"\"\"\n    user = get_current_user()\n    if not user or not user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    product = data_store['products'].get(product_id)\n    if not product:\n        flash('Product not found.', 'error')\n        return redirect(url_for('admin_products'))\n    \n    # Delete associated reviews\n    reviews_to_delete = [r_id for r_id, review in data_store['reviews'].items() if review.product_id == product_id]\n    for review_id in reviews_to_delete:\n        del data_store['reviews'][review_id]\n    \n    # Delete the product\n    product_name = product.name\n    del data_store['products'][product_id]\n    flash(f'Product \"{product_name}\" and its {len(reviews_to_delete)} reviews deleted successfully!', 'success')\n    \n    return redirect(url_for('admin_products'))\n\n@app.route('/admin/toggle_admin/<int:user_id>', methods=['POST'])\ndef toggle_admin(user_id):\n    \"\"\"Toggle admin privileges for a user\"\"\"\n    current_user = get_current_user()\n    if not current_user or not current_user.is_admin:\n        flash('Access denied.', 'error')\n        return redirect(url_for('index'))\n    \n    target_user = data_store['users'].get(user_id)\n    if not target_user:\n        from flask import abort\n        abort(404)\n    \n    # Prevent removing admin from yourself\n    if target_user.id == current_user.id:\n        flash('You cannot remove admin privileges from yourself.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    target_user.is_admin = not target_user.is_admin\n    # No commit needed for in-memory storage\n    \n    action = 'granted' if target_user.is_admin else 'removed'\n    flash(f'Admin privileges {action} for {target_user.username}.', 'success')\n    return redirect(url_for('admin_users'))\n","size_bytes":27429},"utils.py":{"content":"from flask import session\nfrom flask_mail import Message\nfrom app import mail\nfrom models import User, Product, Order, Review, CartItem\nfrom data_store import data_store\nimport logging\n\ndef get_current_user():\n    \"\"\"Get current logged-in user\"\"\"\n    user_id = session.get('user_id')\n    if user_id:\n        return data_store['users'].get(user_id)\n    return None\n\ndef get_cart():\n    \"\"\"Get current user's cart\"\"\"\n    if 'cart' not in session:\n        session['cart'] = {}\n    return session['cart']\n\ndef add_to_cart(product_id, quantity=1):\n    \"\"\"Add item to cart\"\"\"\n    cart = get_cart()\n    product = data_store['products'].get(product_id)\n    \n    if not product:\n        return False\n    \n    if product.stock < quantity:\n        return False\n    \n    product_id_str = str(product_id)\n    if product_id_str in cart:\n        cart[product_id_str]['quantity'] += quantity\n    else:\n        cart[product_id_str] = {\n            'quantity': quantity,\n            'price': product.price,\n            'name': product.name\n        }\n    \n    session['cart'] = cart\n    return True\n\ndef remove_from_cart(product_id):\n    \"\"\"Remove item from cart\"\"\"\n    cart = get_cart()\n    product_id_str = str(product_id)\n    if product_id_str in cart:\n        del cart[product_id_str]\n        session['cart'] = cart\n        return True\n    return False\n\ndef update_cart_quantity(product_id, quantity):\n    \"\"\"Update item quantity in cart\"\"\"\n    cart = get_cart()\n    product_id_str = str(product_id)\n    product = data_store['products'].get(product_id)\n    \n    if product_id_str in cart and product and product.stock >= quantity:\n        if quantity <= 0:\n            del cart[product_id_str]\n        else:\n            cart[product_id_str]['quantity'] = quantity\n        session['cart'] = cart\n        return True\n    return False\n\ndef get_cart_total():\n    \"\"\"Calculate cart total\"\"\"\n    cart = get_cart()\n    total = 0\n    for item in cart.values():\n        total += item['quantity'] * item['price']\n    return total\n\ndef get_cart_count():\n    \"\"\"Get total items in cart\"\"\"\n    cart = get_cart()\n    return sum(item['quantity'] for item in cart.values())\n\ndef clear_cart():\n    \"\"\"Clear the cart\"\"\"\n    session['cart'] = {}\n    session.modified = True\n\ndef send_order_confirmation_email(user_email, order):\n    \"\"\"Send order confirmation email\"\"\"\n    try:\n        msg = Message(\n            subject=f'Order Confirmation - #{order.id}',\n            recipients=[user_email],\n            body=f'''\nDear Customer,\n\nThank you for your order at NIKITA RASOI & BAKES!\n\nOrder Details:\nOrder ID: #{order.id}\nTotal: ₹{order.total:.2f}\nStatus: {order.status.title()}\n\nYour delicious baked goods will be prepared with care and delivered to:\n{order.shipping_address}\n\nYou can track your order status in your account dashboard.\n\nThank you for choosing NIKITA RASOI & BAKES!\n\nBest regards,\nThe NIKITA RASOI & BAKES Team\n            '''\n        )\n        mail.send(msg)\n        logging.info(f\"Order confirmation email sent to {user_email}\")\n        return True\n    except Exception as e:\n        logging.error(f\"Failed to send email: {str(e)}\")\n        return False\n\ndef calculate_order_stats():\n    \"\"\"Calculate order statistics for admin dashboard\"\"\"\n    orders = list(data_store['orders'].values())\n    \n    total_orders = len(orders)\n    total_revenue = sum(order.total for order in orders)\n    \n    pending_orders = len([o for o in orders if o.status == 'pending'])\n    completed_orders = len([o for o in orders if o.status == 'delivered'])\n    \n    return {\n        'total_orders': total_orders,\n        'total_revenue': total_revenue,\n        'pending_orders': pending_orders,\n        'completed_orders': completed_orders\n    }\n\ndef search_products(query, category=None):\n    \"\"\"Search products by name and optionally filter by category\"\"\"\n    products = list(data_store['products'].values())\n    \n    if category and category != 'all':\n        products = [p for p in products if p.category.lower() == category.lower()]\n    \n    if query:\n        query = query.lower()\n        products = [p for p in products if query in p.name.lower() or query in p.description.lower()]\n    \n    return list(products)\n","size_bytes":4183},"static/css/style.css":{"content":"/* Sweet Crumbs Bakery - Custom CSS */\n\n:root {\n    --brown-primary: #8B4513;\n    --brown-secondary: #A0522D;\n    --cream: #FDF5E6;\n    --gold: #DAA520;\n    --warm-white: #FFFEF7;\n    --text-brown: #654321;\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: var(--warm-white);\n    color: var(--text-brown);\n}\n\n/* Custom Brown Theme */\n.bg-brown {\n    background-color: var(--brown-primary) !important;\n}\n\n.text-brown {\n    color: var(--brown-primary) !important;\n}\n\n.btn-brown {\n    background-color: var(--brown-primary);\n    border-color: var(--brown-primary);\n    color: white;\n}\n\n.btn-brown:hover {\n    background-color: var(--brown-secondary);\n    border-color: var(--brown-secondary);\n    color: white;\n}\n\n.btn-outline-brown {\n    color: var(--brown-primary);\n    border-color: var(--brown-primary);\n}\n\n.btn-outline-brown:hover {\n    background-color: var(--brown-primary);\n    border-color: var(--brown-primary);\n    color: white;\n}\n\n.bg-cream {\n    background-color: var(--cream) !important;\n}\n\n/* Navigation */\n.navbar-brand {\n    font-size: 1.5rem;\n    font-weight: bold;\n}\n\n.navbar-dark .navbar-nav .nav-link {\n    color: white;\n    transition: color 0.3s ease;\n}\n\n.navbar-dark .navbar-nav .nav-link:hover {\n    color: var(--gold);\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--cream) 0%, #F5F5DC 100%);\n    min-height: 500px;\n}\n\n.hero-section h1 {\n    font-weight: 700;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n}\n\n/* Product Cards */\n.product-card {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    border: none;\n    border-radius: 15px;\n    overflow: hidden;\n}\n\n.product-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(139, 69, 19, 0.15);\n}\n\n.product-image {\n    height: 250px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.product-card:hover .product-image {\n    transform: scale(1.05);\n}\n\n/* Feature Cards */\n.feature-card {\n    background: white;\n    border-radius: 15px;\n    box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n    transition: transform 0.3s ease;\n    height: 100%;\n}\n\n.feature-card:hover {\n    transform: translateY(-3px);\n}\n\n.feature-card i {\n    margin-bottom: 1rem;\n}\n\n/* Footer */\nfooter {\n    margin-top: auto;\n}\n\nfooter h5 {\n    color: var(--gold);\n    margin-bottom: 1rem;\n}\n\n/* Forms */\n.form-control:focus {\n    border-color: var(--brown-primary);\n    box-shadow: 0 0 0 0.2rem rgba(139, 69, 19, 0.25);\n}\n\n.form-select:focus {\n    border-color: var(--brown-primary);\n    box-shadow: 0 0 0 0.2rem rgba(139, 69, 19, 0.25);\n}\n\n/* Cart Page */\n.cart-item-image {\n    width: 80px;\n    height: 80px;\n    object-fit: cover;\n    border-radius: 10px;\n}\n\n/* Checkout Page */\n.checkout-summary {\n    background: var(--cream);\n    border-radius: 15px;\n    padding: 2rem;\n}\n\n/* Admin Dashboard */\n.bg-gradient-primary {\n    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);\n}\n\n.bg-gradient-warning {\n    background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);\n}\n\n.bg-gradient-info {\n    background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);\n}\n\n/* Timeline */\n.timeline-item {\n    position: relative;\n}\n\n.timeline-item:not(:last-child)::before {\n    content: '';\n    position: absolute;\n    left: 8px;\n    top: 30px;\n    bottom: -15px;\n    width: 2px;\n    background-color: #dee2e6;\n}\n\n/* Badges */\n.badge {\n    font-size: 0.75em;\n    padding: 0.5em 0.75em;\n}\n\n/* Order Status */\n.order-status-pending {\n    color: #856404;\n    background-color: #fff3cd;\n}\n\n.order-status-confirmed {\n    color: #0c5460;\n    background-color: #d1ecf1;\n}\n\n.order-status-preparing {\n    color: #004085;\n    background-color: #d1ecf1;\n}\n\n.order-status-delivered {\n    color: #155724;\n    background-color: #d4edda;\n}\n\n/* Reviews */\n.review-stars {\n    color: var(--gold);\n}\n\n/* Loading States */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.spinner-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 9999;\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.fade-in {\n    animation: fadeIn 0.5s ease-out;\n}\n\n@keyframes slideIn {\n    from { transform: translateX(-100%); }\n    to { transform: translateX(0); }\n}\n\n.slide-in {\n    animation: slideIn 0.3s ease-out;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hero-section {\n        min-height: 400px;\n        padding: 2rem 0;\n    }\n    \n    .hero-section h1 {\n        font-size: 2rem;\n    }\n    \n    .feature-card {\n        margin-bottom: 2rem;\n    }\n    \n    .product-image {\n        height: 200px;\n    }\n}\n\n@media (max-width: 576px) {\n    .hero-section h1 {\n        font-size: 1.75rem;\n    }\n    \n    .btn-group {\n        flex-direction: column;\n    }\n    \n    .btn-group .btn {\n        border-radius: 0.375rem !important;\n        margin-bottom: 0.5rem;\n    }\n    \n    .cart-item-image {\n        width: 60px;\n        height: 60px;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .btn,\n    footer {\n        display: none !important;\n    }\n    \n    .container {\n        max-width: 100% !important;\n    }\n}\n\n/* Accessibility */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus indicators */\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: 2px solid var(--brown-primary);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .text-muted {\n        color: var(--text-brown) !important;\n    }\n    \n    .border {\n        border-width: 2px !important;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Dark mode support (future enhancement) */\n@media (prefers-color-scheme: dark) {\n    :root {\n        --warm-white: #1a1a1a;\n        --cream: #2d2d2d;\n        --text-brown: #d4b896;\n    }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--cream);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--brown-primary);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--brown-secondary);\n}\n\n/* QR Code Modal Styles */\n.qr-code-wrapper {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n\n.qr-code {\n    background: white;\n    padding: 15px;\n    border-radius: 10px;\n    box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n    border: 2px dashed var(--brown-primary);\n}\n\n.qr-placeholder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.timer-display {\n    display: flex;\n    align-items: center;\n}\n\n.screenshot-preview img {\n    max-width: 100%;\n    border: 2px solid var(--brown-primary);\n}\n\n/* Payment Methods Styling */\n.payment-methods .form-check {\n    border: 2px solid #e9ecef;\n    border-radius: 8px;\n    padding: 15px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.payment-methods .form-check:hover {\n    border-color: var(--brown-primary);\n    background-color: rgba(139, 69, 19, 0.05);\n}\n\n.payment-methods .form-check-input:checked + .form-check-label {\n    color: var(--brown-primary);\n    font-weight: 600;\n}\n\n.payment-methods .form-check:has(.form-check-input:checked) {\n    border-color: var(--brown-primary);\n    background-color: rgba(139, 69, 19, 0.1);\n}\n\n.payment-details {\n    background: #f8f9fa;\n    border-radius: 8px;\n    padding: 20px;\n    margin-top: 15px;\n}\n\n/* Enhanced Notifications */\n.notification-overlay {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 10000;\n    pointer-events: none;\n}\n\n.notification-overlay .alert {\n    pointer-events: auto;\n    margin-bottom: 10px;\n    animation: slideInRight 0.3s ease-out;\n}\n\n@keyframes slideInRight {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Loading States */\n.btn-loading {\n    position: relative;\n    pointer-events: none;\n}\n\n.btn-loading::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 16px;\n    height: 16px;\n    margin: -8px 0 0 -8px;\n    border: 2px solid transparent;\n    border-top: 2px solid currentColor;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Enhanced Cart Styles */\n.cart-item-enhanced {\n    transition: all 0.3s ease;\n}\n\n.cart-item-enhanced:hover {\n    background-color: rgba(139, 69, 19, 0.05);\n}\n\n.cart-item-removing {\n    opacity: 0.5;\n    transform: scale(0.95);\n    transition: all 0.3s ease;\n}\n\n/* Product Card Enhancements */\n.product-card-enhanced {\n    position: relative;\n    overflow: hidden;\n}\n\n.product-card-enhanced .add-to-cart-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(139, 69, 19, 0.9);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    pointer-events: none;\n}\n\n.product-card-enhanced.adding-to-cart .add-to-cart-overlay {\n    opacity: 1;\n    pointer-events: auto;\n}\n\n/* Enhanced Modal Styles */\n.modal-lg {\n    max-width: 600px;\n}\n\n.modal-header {\n    border-bottom: 2px solid var(--brown-primary);\n}\n\n.modal-footer {\n    border-top: 2px solid #e9ecef;\n}\n\n/* Progress Indicators */\n.progress-step {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.progress-step-icon {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: var(--brown-primary);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 15px;\n    font-weight: bold;\n}\n\n.progress-step-content {\n    flex-grow: 1;\n}\n\n.progress-step.completed .progress-step-icon {\n    background: #28a745;\n}\n\n.progress-step.active .progress-step-icon {\n    background: #ffc107;\n    color: #333;\n}\n\n/* Utility Classes */\n.text-shadow {\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n}\n\n.box-shadow-lg {\n    box-shadow: 0 1rem 3rem rgba(0,0,0,.175) !important;\n}\n\n.border-brown {\n    border-color: var(--brown-primary) !important;\n}\n\n.bg-light-brown {\n    background-color: rgba(139, 69, 19, 0.1) !important;\n}\n\n.hover-lift:hover {\n    transform: translateY(-2px);\n    transition: transform 0.3s ease;\n}\n\n/* Pulse Animation for Important Elements */\n.pulse {\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0% {\n        box-shadow: 0 0 0 0 rgba(139, 69, 19, 0.7);\n    }\n    70% {\n        box-shadow: 0 0 0 10px rgba(139, 69, 19, 0);\n    }\n    100% {\n        box-shadow: 0 0 0 0 rgba(139, 69, 19, 0);\n    }\n}\n","size_bytes":11276},"static/js/cart.js":{"content":"/**\n * NIKITA RASOI & BAKES - Cart Management\n * Handles shopping cart functionality and interactions\n */\n\nclass CartManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.updateCartDisplay();\n    }\n\n    bindEvents() {\n        // Add to cart buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.add-to-cart-btn') || e.target.closest('.add-to-cart-btn')) {\n                e.preventDefault();\n                this.handleAddToCart(e.target.closest('.add-to-cart-btn') || e.target);\n            }\n        });\n\n        // Quantity update buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.quantity-minus')) {\n                e.preventDefault();\n                this.updateQuantity(e.target, -1);\n            } else if (e.target.matches('.quantity-plus')) {\n                e.preventDefault();\n                this.updateQuantity(e.target, 1);\n            }\n        });\n\n        // Remove item buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.remove-item-btn') || e.target.closest('.remove-item-btn')) {\n                e.preventDefault();\n                this.handleRemoveItem(e.target.closest('.remove-item-btn') || e.target);\n            }\n        });\n\n        // Quantity input changes\n        document.addEventListener('change', (e) => {\n            if (e.target.matches('.quantity-input')) {\n                this.handleQuantityChange(e.target);\n            }\n        });\n    }\n\n    handleAddToCart(button) {\n        const productId = button.getAttribute('data-product-id') || \n                         button.closest('form')?.action?.split('/').pop();\n        const form = button.closest('form');\n        const quantityInput = form?.querySelector('select[name=\"quantity\"], input[name=\"quantity\"]');\n        const quantity = quantityInput ? quantityInput.value : 1;\n\n        // Show loading state\n        this.setButtonLoading(button, true);\n\n        // Create form data\n        const formData = new FormData();\n        formData.append('quantity', quantity);\n\n        fetch(`/add_to_cart/${productId}`, {\n            method: 'POST',\n            body: formData\n        })\n        .then(response => {\n            if (response.ok) {\n                return response.text();\n            }\n            throw new Error('Failed to add item to cart');\n        })\n        .then(html => {\n            // Check if response contains success message\n            if (html.includes('added to cart') || html.includes('success')) {\n                this.showCartNotification('Item added to cart!', 'success');\n                this.updateCartDisplay();\n                this.animateAddToCart(button);\n            } else {\n                this.showCartNotification('Unable to add item to cart', 'error');\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            this.showCartNotification('Failed to add item to cart', 'error');\n        })\n        .finally(() => {\n            this.setButtonLoading(button, false);\n        });\n    }\n\n    updateQuantity(button, delta) {\n        const row = button.closest('tr') || button.closest('.cart-item');\n        const quantityInput = row.querySelector('.quantity-input');\n        const currentQuantity = parseInt(quantityInput.value);\n        const newQuantity = Math.max(0, currentQuantity + delta);\n        \n        if (newQuantity === 0) {\n            this.handleRemoveItem(button);\n            return;\n        }\n\n        quantityInput.value = newQuantity;\n        this.handleQuantityChange(quantityInput);\n    }\n\n    handleQuantityChange(input) {\n        const productId = input.getAttribute('data-product-id');\n        const quantity = parseInt(input.value);\n        const row = input.closest('tr') || input.closest('.cart-item');\n\n        if (quantity <= 0) {\n            this.handleRemoveItem(input);\n            return;\n        }\n\n        // Update quantity via form submission\n        const form = input.closest('form');\n        if (form) {\n            const formData = new FormData(form);\n            \n            fetch('/update_cart', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) {\n                    this.updateCartDisplay();\n                    this.updateRowTotal(row);\n                    this.showCartNotification('Cart updated!', 'success');\n                } else {\n                    throw new Error('Failed to update cart');\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                this.showCartNotification('Failed to update cart', 'error');\n            });\n        }\n    }\n\n    handleRemoveItem(button) {\n        if (confirm('Remove this item from your cart?')) {\n            const productId = button.getAttribute('data-product-id');\n            const row = button.closest('tr') || button.closest('.cart-item');\n            \n            // Animate removal\n            row.style.opacity = '0.5';\n            row.style.pointerEvents = 'none';\n\n            fetch(`/remove_from_cart/${productId}`)\n            .then(response => {\n                if (response.ok) {\n                    row.remove();\n                    this.updateCartDisplay();\n                    this.showCartNotification('Item removed from cart', 'info');\n                    this.checkEmptyCart();\n                } else {\n                    throw new Error('Failed to remove item');\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                this.showCartNotification('Failed to remove item', 'error');\n                // Restore row state\n                row.style.opacity = '1';\n                row.style.pointerEvents = 'auto';\n            });\n        }\n    }\n\n    updateRowTotal(row) {\n        const quantityInput = row.querySelector('.quantity-input');\n        const priceElement = row.querySelector('.item-price');\n        const totalElement = row.querySelector('.item-total');\n        \n        if (quantityInput && priceElement && totalElement) {\n            const quantity = parseInt(quantityInput.value);\n            const price = parseFloat(priceElement.textContent.replace('₹', ''));\n            const total = quantity * price;\n            \n            totalElement.textContent = `₹${total.toFixed(2)}`;\n        }\n    }\n\n    updateCartDisplay() {\n        // This would typically fetch updated cart data from the server\n        // For now, we'll update the cart count in the navbar\n        this.updateCartCount();\n        this.updateCartTotal();\n    }\n\n    updateCartCount() {\n        fetch('/cart')\n        .then(response => response.text())\n        .then(html => {\n            // Parse the response to extract cart count\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(html, 'text/html');\n            const cartBadge = document.querySelector('.navbar .badge');\n            const newCartBadge = doc.querySelector('.navbar .badge');\n            \n            if (cartBadge && newCartBadge) {\n                cartBadge.textContent = newCartBadge.textContent;\n                cartBadge.style.display = newCartBadge.style.display;\n            }\n        })\n        .catch(error => console.error('Error updating cart count:', error));\n    }\n\n    updateCartTotal() {\n        const cartTotalElements = document.querySelectorAll('.cart-total');\n        if (cartTotalElements.length === 0) return;\n\n        // Calculate total from visible items\n        let total = 0;\n        document.querySelectorAll('.item-total').forEach(element => {\n            const value = parseFloat(element.textContent.replace('₹', ''));\n            total += value;\n        });\n\n        cartTotalElements.forEach(element => {\n            element.textContent = `₹${total.toFixed(2)}`;\n        });\n    }\n\n    checkEmptyCart() {\n        const cartItems = document.querySelectorAll('.cart-item');\n        if (cartItems.length === 0) {\n            // Show empty cart message\n            const cartContainer = document.querySelector('.cart-container');\n            if (cartContainer) {\n                cartContainer.innerHTML = `\n                    <div class=\"text-center py-5\">\n                        <i class=\"fas fa-shopping-cart fa-4x text-muted mb-4\"></i>\n                        <h3 class=\"text-muted mb-3\">Your cart is empty</h3>\n                        <p class=\"text-muted mb-4\">Looks like you haven't added any delicious treats to your cart yet.</p>\n                        <a href=\"/products\" class=\"btn btn-brown btn-lg\">\n                            <i class=\"fas fa-shopping-bag me-2\"></i>Start Shopping\n                        </a>\n                    </div>\n                `;\n            }\n        }\n    }\n\n    animateAddToCart(button) {\n        // Create a small animation effect\n        const originalText = button.innerHTML;\n        button.innerHTML = '<i class=\"fas fa-check me-2\"></i>Added!';\n        button.classList.add('btn-success');\n        button.classList.remove('btn-brown');\n\n        setTimeout(() => {\n            button.innerHTML = originalText;\n            button.classList.remove('btn-success');\n            button.classList.add('btn-brown');\n        }, 1500);\n    }\n\n    setButtonLoading(button, loading) {\n        if (loading) {\n            button.disabled = true;\n            button.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Adding...';\n        } else {\n            button.disabled = false;\n        }\n    }\n\n    showCartNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;\n        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n        notification.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n\n        document.body.appendChild(notification);\n\n        // Auto-remove after 3 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 3000);\n    }\n\n    // Utility method for formatting currency\n    formatCurrency(amount) {\n        return new Intl.NumberFormat('en-IN', {\n            style: 'currency',\n            currency: 'INR'\n        }).format(amount);\n    }\n}\n\n// Initialize cart manager when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.cartManager = new CartManager();\n});\n\n// Export for use in other scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CartManager;\n}\n","size_bytes":10930},"static/js/main.js":{"content":"/**\n * NIKITA RASOI & BAKES - Main JavaScript\n * Core functionality and utility functions\n */\n\n(function() {\n    'use strict';\n\n    // Application namespace\n    window.NikitaRasoi = window.NikitaRasoi || {};\n\n    /**\n     * Main application class\n     */\n    class BakeryApp {\n        constructor() {\n            this.init();\n        }\n\n        init() {\n            this.bindGlobalEvents();\n            this.initializeComponents();\n            this.handlePageSpecificLogic();\n        }\n\n        bindGlobalEvents() {\n            // Handle form submissions with loading states\n            document.addEventListener('submit', (e) => {\n                const form = e.target;\n                if (form.classList.contains('needs-loading')) {\n                    this.showFormLoading(form);\n                }\n            });\n\n            // Handle AJAX links\n            document.addEventListener('click', (e) => {\n                if (e.target.classList.contains('ajax-link')) {\n                    e.preventDefault();\n                    this.handleAjaxLink(e.target);\n                }\n            });\n\n            // Auto-dismiss alerts\n            document.addEventListener('DOMContentLoaded', () => {\n                this.autoDismissAlerts();\n            });\n\n\n\n            // Handle tooltip initialization\n            this.initializeTooltips();\n\n            // Handle modal events\n            this.bindModalEvents();\n\n            // Smooth scrolling for anchor links\n            this.initializeSmoothScrolling();\n        }\n\n        initializeComponents() {\n            // Initialize star ratings\n            this.initializeStarRatings();\n\n            // Initialize image lazy loading\n            this.initializeLazyLoading();\n\n            // Initialize search functionality\n            this.initializeSearch();\n\n            // Initialize form validation\n            this.initializeFormValidation();\n        }\n\n        handlePageSpecificLogic() {\n            const path = window.location.pathname;\n\n            switch (true) {\n                case path.includes('/products'):\n                    this.initializeProductsPage();\n                    break;\n                case path.includes('/admin'):\n                    this.initializeAdminPage();\n                    break;\n                case path.includes('/checkout'):\n                    this.initializeCheckoutPage();\n                    break;\n                case path === '/':\n                    this.initializeHomePage();\n                    break;\n            }\n        }\n\n        // Form handling\n        showFormLoading(form) {\n            const submitBtn = form.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n                const originalText = submitBtn.innerHTML;\n                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Processing...';\n                submitBtn.disabled = true;\n\n                // Store original text for potential restoration\n                submitBtn.setAttribute('data-original-text', originalText);\n            }\n        }\n\n        restoreFormButton(form) {\n            const submitBtn = form.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n                const originalText = submitBtn.getAttribute('data-original-text');\n                if (originalText) {\n                    submitBtn.innerHTML = originalText;\n                    submitBtn.disabled = false;\n                }\n            }\n        }\n\n        // Alert handling\n        autoDismissAlerts() {\n            const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n            alerts.forEach(alert => {\n                setTimeout(() => {\n                    if (alert.parentNode) {\n                        alert.classList.remove('show');\n                        setTimeout(() => alert.remove(), 150);\n                    }\n                }, 5000);\n            });\n        }\n\n        showAlert(message, type = 'info', permanent = false) {\n            const alertDiv = document.createElement('div');\n            alertDiv.className = `alert alert-${type} alert-dismissible fade show ${permanent ? 'alert-permanent' : ''}`;\n            alertDiv.innerHTML = `\n                ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n            `;\n\n            const container = document.querySelector('.container') || document.body;\n            container.insertBefore(alertDiv, container.firstChild);\n\n            if (!permanent) {\n                setTimeout(() => {\n                    if (alertDiv.parentNode) {\n                        alertDiv.remove();\n                    }\n                }, 5000);\n            }\n        }\n\n        // Star rating functionality\n        initializeStarRatings() {\n            document.querySelectorAll('.star-rating').forEach(rating => {\n                const stars = rating.querySelectorAll('.star');\n                const input = rating.querySelector('input[type=\"hidden\"]');\n\n                stars.forEach((star, index) => {\n                    star.addEventListener('click', () => {\n                        const value = index + 1;\n                        if (input) input.value = value;\n\n                        stars.forEach((s, i) => {\n                            s.classList.toggle('active', i < value);\n                        });\n                    });\n\n                    star.addEventListener('mouseenter', () => {\n                        stars.forEach((s, i) => {\n                            s.classList.toggle('hover', i <= index);\n                        });\n                    });\n                });\n\n                rating.addEventListener('mouseleave', () => {\n                    stars.forEach(s => s.classList.remove('hover'));\n                });\n            });\n        }\n\n        // Image lazy loading\n        initializeLazyLoading() {\n            if ('IntersectionObserver' in window) {\n                const imageObserver = new IntersectionObserver((entries, observer) => {\n                    entries.forEach(entry => {\n                        if (entry.isIntersecting) {\n                            const img = entry.target;\n                            img.src = img.dataset.src;\n                            img.classList.remove('lazy');\n                            observer.unobserve(img);\n                        }\n                    });\n                });\n\n                document.querySelectorAll('img[data-src]').forEach(img => {\n                    imageObserver.observe(img);\n                });\n            } else {\n                // Fallback for older browsers\n                document.querySelectorAll('img[data-src]').forEach(img => {\n                    img.src = img.dataset.src;\n                });\n            }\n        }\n\n        // Search functionality\n        initializeSearch() {\n            const searchInputs = document.querySelectorAll('.search-input');\n            searchInputs.forEach(input => {\n                let searchTimeout;\n\n                input.addEventListener('input', (e) => {\n                    clearTimeout(searchTimeout);\n                    searchTimeout = setTimeout(() => {\n                        this.performSearch(e.target.value, e.target);\n                    }, 300);\n                });\n            });\n        }\n\n        performSearch(query, input) {\n            const searchContainer = input.closest('.search-container');\n            const resultsContainer = searchContainer?.querySelector('.search-results');\n\n            if (!resultsContainer || query.length < 2) {\n                if (resultsContainer) resultsContainer.style.display = 'none';\n                return;\n            }\n\n            // Show loading\n            resultsContainer.innerHTML = '<div class=\"p-3\"><i class=\"fas fa-spinner fa-spin\"></i> Searching...</div>';\n            resultsContainer.style.display = 'block';\n\n            // Simulate search (replace with actual search endpoint)\n            setTimeout(() => {\n                resultsContainer.innerHTML = `\n                    <div class=\"p-3\">\n                        <div class=\"search-result-item\">Sample result for \"${query}\"</div>\n                    </div>\n                `;\n            }, 500);\n        }\n\n        // Form validation\n        initializeFormValidation() {\n            const forms = document.querySelectorAll('.needs-validation');\n            forms.forEach(form => {\n                form.addEventListener('submit', (e) => {\n                    if (!form.checkValidity()) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        this.showValidationErrors(form);\n                    }\n                    form.classList.add('was-validated');\n                });\n            });\n        }\n\n        showValidationErrors(form) {\n            const firstInvalid = form.querySelector(':invalid');\n            if (firstInvalid) {\n                firstInvalid.focus();\n                firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            }\n        }\n\n        // Tooltip initialization\n        initializeTooltips() {\n            if (typeof bootstrap !== 'undefined') {\n                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n                tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n            }\n        }\n\n        // Modal events\n        bindModalEvents() {\n            document.addEventListener('shown.bs.modal', (e) => {\n                const modal = e.target;\n                const firstInput = modal.querySelector('input, textarea, select');\n                if (firstInput) firstInput.focus();\n            });\n\n            document.addEventListener('hidden.bs.modal', (e) => {\n                const modal = e.target;\n                const form = modal.querySelector('form');\n                if (form) {\n                    form.reset();\n                    form.classList.remove('was-validated');\n                }\n            });\n        }\n\n        // Smooth scrolling\n        initializeSmoothScrolling() {\n            document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n                anchor.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const href = anchor.getAttribute('href');\n                    if (href && href !== '#') {\n                        const target = document.querySelector(href);\n                        if (target) {\n                            target.scrollIntoView({ behavior: 'smooth' });\n                        }\n                    }\n                });\n            });\n        }\n\n        // Page-specific initializations\n        initializeProductsPage() {\n            // Product filter functionality\n            const filterButtons = document.querySelectorAll('.filter-btn');\n            filterButtons.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    this.filterProducts(btn.dataset.category);\n                });\n            });\n\n            // Product comparison\n            this.initializeProductComparison();\n        }\n\n        initializeAdminPage() {\n            // Admin-specific functionality\n            this.initializeDataTables();\n            this.initializeCharts();\n        }\n\n        initializeCheckoutPage() {\n            // Address selection logic\n            const addressRadios = document.querySelectorAll('input[name=\"address_id\"]');\n            addressRadios.forEach(radio => {\n                radio.addEventListener('change', (e) => {\n                    this.updateShippingPreview(e.target.value);\n                });\n            });\n\n            // Payment form validation\n            this.initializePaymentValidation();\n        }\n\n        initializeHomePage() {\n            // Hero section animations\n            this.animateHeroElements();\n\n            // Featured products carousel\n            this.initializeFeaturedCarousel();\n        }\n\n        // Utility methods\n        filterProducts(category) {\n            const products = document.querySelectorAll('.product-card');\n            products.forEach(product => {\n                const productCategory = product.dataset.category;\n                if (category === 'all' || productCategory === category) {\n                    product.style.display = 'block';\n                    product.classList.add('fade-in');\n                } else {\n                    product.style.display = 'none';\n                }\n            });\n        }\n\n        initializeProductComparison() {\n            const compareButtons = document.querySelectorAll('.compare-btn');\n            let compareList = JSON.parse(localStorage.getItem('compareList') || '[]');\n\n            compareButtons.forEach(btn => {\n                btn.addEventListener('click', (e) => {\n                    const productId = e.target.dataset.productId;\n                    if (compareList.includes(productId)) {\n                        compareList = compareList.filter(id => id !== productId);\n                        btn.classList.remove('active');\n                    } else if (compareList.length < 3) {\n                        compareList.push(productId);\n                        btn.classList.add('active');\n                    } else {\n                        this.showAlert('You can compare up to 3 products at a time', 'warning');\n                    }\n\n                    localStorage.setItem('compareList', JSON.stringify(compareList));\n                    this.updateCompareCounter();\n                });\n            });\n        }\n\n        updateCompareCounter() {\n            const counter = document.querySelector('.compare-counter');\n            const compareList = JSON.parse(localStorage.getItem('compareList') || '[]');\n            if (counter) {\n                counter.textContent = compareList.length;\n                counter.style.display = compareList.length > 0 ? 'inline' : 'none';\n            }\n        }\n\n        initializeCharts() {\n            // Initialize charts for admin dashboard\n            if (typeof Chart !== 'undefined') {\n                this.initializeSalesChart();\n                this.initializeVisitorsChart();\n            }\n        }\n\n        initializeSalesChart() {\n            const canvas = document.getElementById('salesChart');\n            if (!canvas) return;\n\n            const ctx = canvas.getContext('2d');\n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                    datasets: [{\n                        label: 'Sales (₹)',\n                        data: [12000, 19000, 15000, 25000, 22000, 30000],\n                        borderColor: 'rgb(139, 69, 19)',\n                        backgroundColor: 'rgba(139, 69, 19, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        }\n\n        initializeVisitorsChart() {\n            const canvas = document.getElementById('visitorsChart');\n            if (!canvas) return;\n\n            const ctx = canvas.getContext('2d');\n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                    datasets: [{\n                        label: 'Visitors',\n                        data: [12, 19, 15, 25, 22, 30, 28],\n                        backgroundColor: 'rgba(139, 69, 19, 0.6)'\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        }\n\n        initializeDataTables() {\n            // Simple table sorting and filtering\n            const tables = document.querySelectorAll('.data-table');\n            tables.forEach(table => {\n                this.makeSortable(table);\n            });\n        }\n\n        makeSortable(table) {\n            const headers = table.querySelectorAll('th[data-sortable]');\n            headers.forEach(header => {\n                header.style.cursor = 'pointer';\n                header.addEventListener('click', () => {\n                    this.sortTable(table, header);\n                });\n            });\n        }\n\n        sortTable(table, header) {\n            const tbody = table.querySelector('tbody');\n            const rows = Array.from(tbody.querySelectorAll('tr'));\n            const columnIndex = Array.from(header.parentNode.children).indexOf(header);\n            const isAscending = header.classList.contains('sort-asc');\n\n            rows.sort((a, b) => {\n                const aValue = a.children[columnIndex].textContent.trim();\n                const bValue = b.children[columnIndex].textContent.trim();\n                \n                if (isAscending) {\n                    return bValue.localeCompare(aValue, undefined, { numeric: true });\n                } else {\n                    return aValue.localeCompare(bValue, undefined, { numeric: true });\n                }\n            });\n\n            // Update header classes\n            table.querySelectorAll('th').forEach(th => th.classList.remove('sort-asc', 'sort-desc'));\n            header.classList.add(isAscending ? 'sort-desc' : 'sort-asc');\n\n            // Reorder rows\n            rows.forEach(row => tbody.appendChild(row));\n        }\n\n        animateHeroElements() {\n            const heroElements = document.querySelectorAll('.hero-section .fade-in');\n            heroElements.forEach((element, index) => {\n                setTimeout(() => {\n                    element.classList.add('animated');\n                }, index * 200);\n            });\n        }\n\n        initializeFeaturedCarousel() {\n            // Simple carousel functionality if needed\n            const carousel = document.querySelector('.featured-carousel');\n            if (carousel) {\n                // Carousel logic here\n            }\n        }\n\n        updateShippingPreview(addressId) {\n            const preview = document.querySelector('.shipping-preview');\n            if (preview) {\n                preview.innerHTML = `<i class=\"fas fa-spinner fa-spin\"></i> Updating...`;\n                \n                setTimeout(() => {\n                    preview.innerHTML = `<i class=\"fas fa-check text-success\"></i> Shipping address updated`;\n                }, 1000);\n            }\n        }\n\n        initializePaymentValidation() {\n            const cardInput = document.querySelector('#cardNumber');\n            if (cardInput) {\n                cardInput.addEventListener('input', (e) => {\n                    // Format card number\n                    let value = e.target.value.replace(/\\D/g, '');\n                    value = value.replace(/(\\d{4})(?=\\d)/g, '$1 ');\n                    e.target.value = value;\n                });\n            }\n        }\n\n        // Utility functions\n        debounce(func, wait) {\n            let timeout;\n            return function executedFunction(...args) {\n                const later = () => {\n                    clearTimeout(timeout);\n                    func(...args);\n                };\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n            };\n        }\n\n        throttle(func, limit) {\n            let inThrottle;\n            return function() {\n                const args = arguments;\n                const context = this;\n                if (!inThrottle) {\n                    func.apply(context, args);\n                    inThrottle = true;\n                    setTimeout(() => inThrottle = false, limit);\n                }\n            };\n        }\n\n        formatCurrency(amount) {\n            return new Intl.NumberFormat('en-IN', {\n                style: 'currency',\n                currency: 'INR'\n            }).format(amount);\n        }\n\n        formatDate(date) {\n            return new Intl.DateTimeFormat('en-US', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            }).format(new Date(date));\n        }\n    }\n\n    // Initialize the application\n    document.addEventListener('DOMContentLoaded', () => {\n        window.NikitaRasoi.app = new BakeryApp();\n    });\n\n    // Expose utilities globally\n    window.NikitaRasoi.utils = {\n        formatCurrency: (amount) => new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(amount),\n        formatDate: (date) => new Intl.DateTimeFormat('en-IN', { year: 'numeric', month: 'long', day: 'numeric' }).format(new Date(date)),\n        debounce: function(func, wait) {\n            let timeout;\n            return function executedFunction(...args) {\n                const later = () => {\n                    clearTimeout(timeout);\n                    func(...args);\n                };\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n            };\n        }\n    };\n\n})();\n","size_bytes":21158},"DEPLOYMENT_GUIDE.md":{"content":"# NIKITA RASOI & BAKES - Deployment Guide\n\n## Overview\nThis comprehensive guide covers deploying the NIKITA RASOI & BAKES Flask e-commerce application both locally and on various free hosting platforms. The application uses Indian Rupee (₹) currency and includes features like product management, cart functionality, order tracking, and admin dashboard.\n\n## 🏠 Local Development Setup\n\n### Prerequisites\n- **Python 3.11 or higher** (recommended: Python 3.11.7)\n- **Git** (for cloning the repository)\n- **Code Editor** (VS Code, PyCharm, or any preferred editor)\n- **Web Browser** (Chrome, Firefox, Safari, or Edge)\n\n### Method 1: Quick Start (Recommended)\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd nikita-rasoi-bakes\n\n# Install dependencies directly (uses uv.lock for consistency)\npip install flask flask-mail werkzeug gunicorn email-validator\n\n# Set environment variable (Windows)\nset SESSION_SECRET=your-super-secret-key-change-this\n\n# Set environment variable (macOS/Linux)\nexport SESSION_SECRET=your-super-secret-key-change-this\n\n# Run the application\npython main.py\n```\n\n### Method 2: Virtual Environment Setup\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd nikita-rasoi-bakes\n\n# Create virtual environment\npython -m venv bakery_env\n\n# Activate virtual environment\n# On Windows:\nbakery_env\\Scripts\\activate\n# On macOS/Linux:\nsource bakery_env/bin/activate\n\n# Install dependencies\npip install flask flask-mail werkzeug gunicorn email-validator\n\n# Run the application\npython main.py\n```\n\n### Method 3: Using requirements.txt\nCreate a `requirements.txt` file if you need one:\n```txt\nFlask==3.0.0\nFlask-Mail==0.9.1\nWerkzeug==3.0.1\ngunicorn==21.2.0\nemail-validator==2.1.0\n```\n\nThen install:\n```bash\npip install -r requirements.txt\n```\n\n### Environment Configuration (Optional)\nFor email functionality, create a `.env` file in the root directory:\n```env\n# Required Settings\nSESSION_SECRET=your-super-secret-key-here-change-this\n\n# Email Configuration (Optional - for order confirmations)\nMAIL_SERVER=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=your-email@gmail.com\nMAIL_PASSWORD=your-app-password\nMAIL_DEFAULT_SENDER=your-email@gmail.com\n\n# Development Settings\nFLASK_ENV=development\nDEBUG=True\n```\n\n### Running the Application\n```bash\n# Method 1: Direct execution (recommended for development)\npython main.py\n\n# Method 2: Using Gunicorn (production-like)\ngunicorn --bind 0.0.0.0:5000 --reload main:app\n\n# Method 3: Using Flask's built-in server\npython -m flask run --host=0.0.0.0 --port=5000\n```\n\n### Accessing Your Local Application\n- **Main Website:** http://localhost:5000\n- **Admin Panel:** http://localhost:5000/admin\n- **Products Page:** http://localhost:5000/products\n- **Cart:** http://localhost:5000/cart\n\n### Default Admin Credentials\n- **Username:** admin\n- **Email:** admin@nikitarasoi.com\n- **Password:** admin123\n\n### Sample Test Users\nThe application comes with pre-loaded sample data:\n- **Customer Account:** john@example.com / password123\n- **Sample Products:** Various Indian bakery items with INR pricing\n- **Sample Orders:** Pre-loaded order history for testing\n\n### Local Development Features\n- **Hot Reload:** Changes to Python files automatically restart the server\n- **Debug Mode:** Detailed error messages for easier development\n- **In-Memory Storage:** No database setup required - data resets on restart\n- **Sample Data:** Pre-loaded products, users, and orders for immediate testing\n\n## 🌐 Free Hosting Options\n\n### Option 1: Replit (Recommended ⭐)\n**Best for:** Beginners, quick deployments, development\n**Free Tier:** Generous with automatic sleep after inactivity\n\n#### Setup on Replit:\n1. **Import Repository:**\n   - Go to replit.com\n   - Click \"Create Repl\" → \"Import from GitHub\"\n   - Enter your repository URL\n   \n2. **Automatic Configuration:**\n   - Replit auto-detects Python projects\n   - Uses `main.py` as entry point\n   - Automatically installs dependencies from `pyproject.toml`\n\n3. **Set Environment Variables:**\n   - Click \"Secrets\" tab (lock icon)\n   - Add: `SESSION_SECRET` = Generate strong 32-character key\n   - Optional: Add email configuration variables\n\n4. **Deploy:**\n   - Click \"Run\" button\n   - Access via provided `.replit.app` URL\n   - Upgrade to \"Always On\" for $7/month to prevent sleeping\n\n#### Advantages:\n- ✅ Zero configuration required\n- ✅ Automatic HTTPS and custom domains\n- ✅ Built-in code editor and terminal\n- ✅ Instant deployments\n- ✅ Great for testing and small projects\n\n#### Limitations:\n- Apps sleep after 1 hour of inactivity (free tier)\n- Limited CPU and memory on free tier\n\n### Option 2: Railway 🚂\n**Best for:** Production-ready deployments, API services\n**Free Tier:** $5 credit monthly (very generous)\n\n#### Setup on Railway:\n1. **Connect Repository:**\n   - Visit railway.app\n   - Sign up with GitHub\n   - Click \"New Project\" → \"Deploy from GitHub repo\"\n\n2. **Automatic Deployment:**\n   - Railway auto-detects Python apps\n   - Uses `Procfile` or auto-generates start command\n\n3. **Environment Variables:**\n   ```\n   SESSION_SECRET=your-secret-key-32-chars\n   PORT=$PORT\n   ```\n\n4. **Custom Start Command:**\n   ```bash\n   gunicorn --bind 0.0.0.0:$PORT main:app\n   ```\n\n#### Advantages:\n- ✅ Automatic deployments on git push\n- ✅ Custom domains and HTTPS\n- ✅ Database add-ons available\n- ✅ No sleep limitations\n- ✅ Professional infrastructure\n\n#### Limitations:\n- Free credit expires monthly\n- Requires credit card for verification\n\n### Option 3: Render 🎨\n**Best for:** Static sites, web services, databases\n**Free Tier:** 750 hours/month (good for always-on apps)\n\n#### Setup on Render:\n1. **Create Web Service:**\n   - Go to render.com\n   - Connect GitHub repository\n   - Choose \"Web Service\"\n\n2. **Configuration:**\n   - **Name:** nikita-rasoi-bakes\n   - **Environment:** Python 3\n   - **Build Command:** `pip install flask flask-mail werkzeug gunicorn email-validator`\n   - **Start Command:** `gunicorn --bind 0.0.0.0:$PORT main:app`\n\n3. **Environment Variables:**\n   - Add `SESSION_SECRET` in dashboard\n   - Optional: Email configuration\n\n#### Advantages:\n- ✅ No credit card required\n- ✅ 750 free hours monthly\n- ✅ Automatic SSL certificates\n- ✅ Built-in monitoring\n- ✅ PostgreSQL databases available\n\n#### Limitations:\n- Slower cold starts\n- Limited bandwidth on free tier\n\n### Option 4: Fly.io ✈️\n**Best for:** Global deployments, Docker containers\n**Free Tier:** Good allowances with credit card verification\n\n#### Setup on Fly.io:\n1. **Install Fly CLI:**\n   ```bash\n   # Install flyctl\n   curl -L https://fly.io/install.sh | sh\n   ```\n\n2. **Initialize App:**\n   ```bash\n   fly auth login\n   fly launch\n   ```\n\n3. **Configuration (fly.toml):**\n   ```toml\n   app = \"nikita-rasoi-bakes\"\n   \n   [env]\n     PORT = \"8080\"\n   \n   [[services]]\n     http_checks = []\n     internal_port = 8080\n     processes = [\"app\"]\n     protocol = \"tcp\"\n   ```\n\n#### Advantages:\n- ✅ Global edge deployments\n- ✅ Docker-based (flexible)\n- ✅ Great performance\n- ✅ Volume storage available\n\n#### Limitations:\n- More complex setup\n- Requires Docker knowledge for advanced use\n\n### Option 5: Vercel + Serverless 🔺\n**Best for:** Serverless deployments, global CDN\n**Free Tier:** Generous for hobby projects\n\n#### Setup on Vercel:\n1. **Install Vercel CLI:**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Create vercel.json:**\n   ```json\n   {\n     \"builds\": [\n       {\n         \"src\": \"main.py\",\n         \"use\": \"@vercel/python\"\n       }\n     ],\n     \"routes\": [\n       {\n         \"src\": \"/(.*)\",\n         \"dest\": \"main.py\"\n       }\n     ]\n   }\n   ```\n\n3. **Deploy:**\n   ```bash\n   vercel --prod\n   ```\n\n#### Advantages:\n- ✅ Global CDN\n- ✅ Instant scaling\n- ✅ Zero configuration\n- ✅ Analytics included\n\n#### Limitations:\n- Serverless limitations (stateless)\n- 10-second execution limit\n\n### Option 6: PythonAnywhere 🐍\n**Best for:** Python-specific hosting, learning\n**Free Tier:** Always-on web apps with limitations\n\n#### Setup on PythonAnywhere:\n1. **Create Free Account:**\n   - Sign up at pythonanywhere.com\n   - Upload your code files\n\n2. **Web App Configuration:**\n   - Create new web app\n   - Choose Python 3.11\n   - Set source code directory\n   - Configure WSGI file\n\n3. **WSGI Configuration:**\n   ```python\n   import sys\n   path = '/home/yourusername/nikita-rasoi-bakes'\n   if path not in sys.path:\n       sys.path.append(path)\n   \n   from main import app as application\n   ```\n\n#### Advantages:\n- ✅ Python-focused platform\n- ✅ Always-on free tier\n- ✅ SSH access available\n- ✅ Good for learning\n\n#### Limitations:\n- Limited CPU seconds on free tier\n- No custom domains on free tier\n\n### Quick Comparison Table\n\n| Platform | Free Tier | Always-On | Custom Domain | Database | Difficulty |\n|----------|-----------|-----------|---------------|----------|------------|\n| Replit | ✅ Good | 💰 Paid | ✅ Yes | ✅ Yes | 🟢 Easy |\n| Railway | ✅ $5/month | ✅ Yes | ✅ Yes | ✅ Yes | 🟡 Medium |\n| Render | ✅ 750hrs | ✅ Yes | ✅ Yes | ✅ Yes | 🟡 Medium |\n| Fly.io | ✅ Good | ✅ Yes | ✅ Yes | ✅ Yes | 🔴 Hard |\n| Vercel | ✅ Good | ✅ Yes | ✅ Yes | ⚠️ Limited | 🟡 Medium |\n| PythonAnywhere | ✅ Limited | ✅ Yes | 💰 Paid | ⚠️ MySQL | 🟡 Medium |\n\n## 🔧 Deployment Configuration Files\n\n### Required Files for External Hosting\n\n#### Create `requirements.txt`:\n```txt\nFlask==3.0.0\nFlask-Mail==0.9.1\nWerkzeug==3.0.1\ngunicorn==21.2.0\nemail-validator==2.1.0\n```\n\n#### Create `Procfile` (for Railway, Heroku):\n```\nweb: gunicorn --bind 0.0.0.0:$PORT main:app\n```\n\n#### Create `runtime.txt` (for Python version specification):\n```\npython-3.11.7\n```\n\n#### Create `.env.example` (for environment variable reference):\n```env\n# Copy this file to .env and fill in your values\nSESSION_SECRET=change-this-to-a-random-32-character-string\n\n# Email Configuration (Optional)\nMAIL_SERVER=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=your-email@gmail.com\nMAIL_PASSWORD=your-app-password\nMAIL_DEFAULT_SENDER=your-email@gmail.com\n\n# Development Settings\nFLASK_ENV=development\nDEBUG=True\n```\n\n#### Create `app.json` (for platform compatibility):\n```json\n{\n  \"name\": \"NIKITA RASOI & BAKES\",\n  \"description\": \"A Flask e-commerce application for an Indian bakery\",\n  \"keywords\": [\"flask\", \"ecommerce\", \"bakery\", \"python\"],\n  \"website\": \"https://github.com/yourusername/nikita-rasoi-bakes\",\n  \"repository\": \"https://github.com/yourusername/nikita-rasoi-bakes\",\n  \"env\": {\n    \"SESSION_SECRET\": {\n      \"description\": \"A secret key for session management\",\n      \"generator\": \"secret\"\n    }\n  },\n  \"formation\": {\n    \"web\": {\n      \"quantity\": 1,\n      \"size\": \"free\"\n    }\n  }\n}\n```\n\n### Docker Configuration (Advanced)\n\n#### Create `Dockerfile`:\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 5000\n\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"main:app\"]\n```\n\n#### Create `.dockerignore`:\n```\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.env\n.git\n.gitignore\nREADME.md\n.DS_Store\n.vscode/\nvenv/\nbakery_env/\n```\n\n## 🔒 Production Considerations\n\n### Security Settings\nFor production deployments, ensure:\n\n1. **Strong Session Secret:**\n   ```python\n   # Generate a secure secret key\n   import secrets\n   SESSION_SECRET = secrets.token_urlsafe(32)\n   # Example: \"KmH8vR2_jP9x4LqWnZt3BcVy1FdGhJkMlN6OsQrTuA8\"\n   ```\n\n2. **Environment Variables:**\n   ```env\n   FLASK_ENV=production\n   DEBUG=False\n   SESSION_SECRET=your-secure-32-character-key\n   ```\n\n3. **Security Headers (add to Flask app):**\n   ```python\n   @app.after_request\n   def security_headers(response):\n       response.headers['X-Content-Type-Options'] = 'nosniff'\n       response.headers['X-Frame-Options'] = 'DENY'\n       response.headers['X-XSS-Protection'] = '1; mode=block'\n       return response\n   ```\n\n4. **HTTPS Only:** All hosting platforms provide HTTPS automatically\n\n### Database Considerations\n**Current Setup:** In-memory storage (suitable for):\n- ✅ Development and testing\n- ✅ Small-scale applications\n- ✅ Demos and prototypes\n- ✅ Educational projects\n\n**For Production with Persistent Data:**\n- **SQLite:** File-based, simple, good for small apps\n- **PostgreSQL:** Recommended for production (available on most platforms)\n- **MySQL/MariaDB:** Alternative relational database\n- **MongoDB:** NoSQL option for flexible schemas\n\n### Email Configuration for Production\n**Recommended Email Services:**\n- **SendGrid:** 100 emails/day free\n- **Mailgun:** 5,000 emails/month free\n- **Amazon SES:** Very affordable\n- **Gmail SMTP:** Requires \"App Passwords\"\n\n**Gmail Setup Example:**\n```env\nMAIL_SERVER=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=your-business-email@gmail.com\nMAIL_PASSWORD=your-16-char-app-password\nMAIL_DEFAULT_SENDER=your-business-email@gmail.com\n```\n\n### Performance Optimization\n\n1. **Static File Serving:**\n   ```python\n   # Enable compression (add to Flask app)\n   from flask_compress import Compress\n   Compress(app)\n   ```\n   - Use CDN for static assets (Cloudflare, AWS CloudFront)\n   - Enable gzip compression\n\n2. **Caching Strategy:**\n   ```python\n   # Session storage with Redis (for multiple servers)\n   import redis\n   from flask_session import Session\n   \n   app.config['SESSION_TYPE'] = 'redis'\n   app.config['SESSION_REDIS'] = redis.from_url('redis://localhost:6379')\n   Session(app)\n   ```\n\n3. **Database Optimization:**\n   - Implement connection pooling\n   - Add database indexes for frequently queried fields\n   - Use database caching for product catalogs\n\n4. **Application Monitoring:**\n   - Add logging for production debugging\n   - Monitor response times and error rates\n   - Set up alerts for downtime\n\n### Scaling Considerations\n\n**Horizontal Scaling (Multiple Servers):**\n- Use external session storage (Redis)\n- Implement load balancing\n- Use external database\n\n**Vertical Scaling (More Resources):**\n- Upgrade hosting plan\n- Optimize database queries\n- Implement caching layers\n\n## Monitoring and Maintenance\n\n### Application Monitoring\n- Monitor application logs\n- Set up error tracking (Sentry, Rollbar)\n- Monitor resource usage\n\n### Backup Strategy\n- Regular data backups (when using persistent storage)\n- Code repository backups\n- Configuration backups\n\n### Updates and Maintenance\n- Regular dependency updates\n- Security patches\n- Monitor for vulnerabilities\n\n## 🛠️ Troubleshooting Guide\n\n### Local Development Issues\n\n#### Python/Flask Issues\n1. **\"Module not found\" Error:**\n   ```bash\n   # Ensure you're in the right directory\n   cd nikita-rasoi-bakes\n   \n   # Check if virtual environment is activated\n   which python  # Should show your virtual environment path\n   \n   # Reinstall dependencies\n   pip install flask flask-mail werkzeug gunicorn email-validator\n   ```\n\n2. **Port Already in Use:**\n   ```bash\n   # Find and kill process using port 5000\n   lsof -ti:5000 | xargs kill -9\n   \n   # Or use a different port\n   python main.py --port=8000\n   ```\n\n3. **Session Secret Missing:**\n   ```bash\n   # Set environment variable\n   export SESSION_SECRET=\"your-32-character-secret-key\"\n   \n   # Or create .env file with SESSION_SECRET\n   ```\n\n4. **Static Files Not Loading:**\n   - Verify file paths in templates\n   - Check static folder structure\n   - Clear browser cache\n\n#### Email Configuration Issues\n1. **Gmail SMTP Not Working:**\n   - Enable 2-Factor Authentication\n   - Generate App Password (not your regular password)\n   - Use app password in MAIL_PASSWORD\n\n2. **Connection Timeout:**\n   ```env\n   # Try alternative Gmail settings\n   MAIL_SERVER=smtp.gmail.com\n   MAIL_PORT=465\n   MAIL_USE_SSL=True\n   ```\n\n### Deployment Issues\n\n#### General Deployment Problems\n1. **Application Won't Start:**\n   ```bash\n   # Check logs for specific errors\n   # Most platforms provide build/deployment logs\n   \n   # Common fixes:\n   # - Verify main.py exists and has app object\n   # - Check if all dependencies are in requirements.txt\n   # - Ensure Python version compatibility\n   ```\n\n2. **Environment Variables Not Set:**\n   ```bash\n   # Verify environment variables are set on platform\n   # Check platform-specific documentation for setting env vars\n   ```\n\n3. **Build Failures:**\n   ```bash\n   # Common causes:\n   # - Missing requirements.txt\n   # - Incompatible Python version\n   # - Syntax errors in code\n   ```\n\n#### Platform-Specific Issues\n\n#### Replit Issues:\n- **App Not Accessible:** Use 0.0.0.0 as host, not localhost\n- **Environment Variables:** Set in Secrets panel, not .env file\n- **Build Errors:** Check Console tab for detailed error messages\n- **App Sleeping:** Upgrade to Always On or use UptimeRobot for periodic pings\n\n#### Railway Issues:\n- **Build Timeout:** Optimize build process, remove unnecessary dependencies\n- **Port Issues:** Ensure app listens on $PORT environment variable\n- **Memory Limits:** Monitor usage, optimize for free tier limits\n- **Credit Exhausted:** Upgrade plan or optimize resource usage\n\n#### Render Issues:\n- **Cold Starts:** Free tier has longer startup times\n- **Build Commands:** Ensure build command installs all dependencies\n- **Environment Variables:** Set in Render dashboard, not in code\n- **Health Checks:** Ensure app responds to health check requests\n\n#### Vercel Issues:\n- **Serverless Limitations:** App must be stateless for Vercel\n- **Request Timeout:** 10-second limit on free tier\n- **File Size Limits:** Large uploads may fail\n- **Memory Storage:** In-memory data won't persist between requests\n\n### Performance Issues\n\n#### Slow Loading Times\n1. **Optimize Images:**\n   - Use compressed images\n   - Implement lazy loading\n   - Consider image CDN\n\n2. **Database Optimization:**\n   - Add indexes for frequently queried fields\n   - Limit query results\n   - Implement pagination\n\n3. **Caching:**\n   ```python\n   # Add simple caching\n   from functools import lru_cache\n   \n   @lru_cache(maxsize=128)\n   def get_popular_products():\n       # Cached function\n       pass\n   ```\n\n#### Memory Issues\n1. **Memory Leaks:**\n   - Monitor memory usage\n   - Clear unused variables\n   - Optimize data structures\n\n2. **Free Tier Limits:**\n   - Implement efficient data structures\n   - Use streaming for large responses\n   - Optimize session storage\n\n### Common Error Messages and Solutions\n\n#### \"Application Error\" (Generic)\n```bash\n# Check application logs for specific error\n# Common causes:\n# 1. Missing environment variables\n# 2. Code syntax errors\n# 3. Import errors\n# 4. Port binding issues\n```\n\n#### \"No module named 'flask'\"\n```bash\n# Dependencies not installed properly\npip install -r requirements.txt\n\n# Or install individually\npip install flask flask-mail werkzeug gunicorn email-validator\n```\n\n#### \"Address already in use\"\n```bash\n# Port 5000 is occupied\n# Kill the process or use different port\nkill -9 $(lsof -ti:5000)\npython main.py --port=8080\n```\n\n#### \"Internal Server Error\"\n```bash\n# Enable debug mode to see detailed errors\nexport FLASK_ENV=development\nexport DEBUG=True\npython main.py\n```\n\n### Testing Your Deployment\n\n#### Functionality Checklist\n- [ ] Home page loads correctly\n- [ ] Product pages display with INR pricing\n- [ ] Cart functionality works (add/remove items)\n- [ ] User registration and login\n- [ ] Order placement with address validation\n- [ ] Admin panel access (admin@nikitarasoi.com / admin123)\n- [ ] Email functionality (if configured)\n- [ ] Responsive design on mobile/tablet\n\n#### Performance Testing\n```bash\n# Test response times\ncurl -w \"@curl-format.txt\" -o /dev/null -s \"https://your-app-url.com\"\n\n# Monitor memory usage (local)\nps aux | grep python\n```\n\n### Getting Help\n\n#### Debugging Steps\n1. **Check Logs:** Platform-specific log viewing\n2. **Test Locally:** Ensure it works on your machine first\n3. **Verify Environment:** Check all environment variables\n4. **Check Dependencies:** Ensure all packages are installed\n5. **Test Incrementally:** Deploy minimal version first\n\n#### Resources for Help\n- **Platform Documentation:** Each hosting platform has comprehensive docs\n- **Flask Documentation:** https://flask.palletsprojects.com/\n- **Stack Overflow:** Search for specific error messages\n- **GitHub Issues:** Check if others have similar problems\n- **Community Forums:** Platform-specific communities\n\n#### Creating Support Tickets\nWhen asking for help, include:\n- Exact error message\n- Platform being used\n- Steps to reproduce\n- Code snippets (relevant parts only)\n- Environment details (Python version, etc.)\n\n## 📚 Additional Resources\n\n### Official Documentation\n- **Flask:** https://flask.palletsprojects.com/\n- **Python:** https://docs.python.org/3/\n- **Replit:** https://docs.replit.com/\n- **Railway:** https://docs.railway.app/\n- **Render:** https://render.com/docs\n- **Vercel:** https://vercel.com/docs\n\n### Learning Resources\n- **Flask Tutorial:** https://flask.palletsprojects.com/tutorial/\n- **Python Deployment:** https://realpython.com/python-web-applications/\n- **Web Development Best Practices:** https://web.dev/\n\n### Community Support\n- **Flask Discord:** Official Flask community\n- **Reddit:** r/flask, r/Python, r/webdev\n- **Stack Overflow:** Tag questions with 'flask', 'python', 'deployment'\n- **GitHub Discussions:** Platform-specific repositories\n\n### Useful Tools\n- **SSL Testing:** https://www.ssllabs.com/ssltest/\n- **Performance Testing:** https://gtmetrix.com/\n- **Uptime Monitoring:** https://uptimerobot.com/ (free)\n- **Error Tracking:** https://sentry.io/ (free tier available)\n\n## 📞 Support and Maintenance\n\n### Regular Maintenance Tasks\n- **Weekly:** Check application logs and performance\n- **Monthly:** Update dependencies and security patches\n- **Quarterly:** Review hosting costs and optimization opportunities\n- **Annually:** Security audit and backup strategy review\n\n### Monitoring Setup\n```python\n# Basic logging setup (add to main.py)\nimport logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s %(levelname)s %(message)s',\n    handlers=[\n        logging.FileHandler('app.log'),\n        logging.StreamHandler()\n    ]\n)\n```\n\n### Backup Strategy\n- **Code:** Always use Git version control\n- **Data:** Regular exports if using persistent storage\n- **Configuration:** Document all environment variables\n- **Database:** Automated backups for production databases\n\n---\n\n## 🎯 Quick Start Summary\n\n### For Beginners (Replit - Recommended)\n1. Go to replit.com and import your GitHub repository\n2. Click \"Run\" - Replit handles everything automatically\n3. Set SESSION_SECRET in Secrets panel\n4. Access your app via the provided .replit.app URL\n\n### For Developers (Railway)\n1. Connect GitHub repository to railway.app\n2. Add SESSION_SECRET environment variable\n3. Deploy automatically on git push\n4. Get custom domain and HTTPS\n\n### For Local Testing\n1. `git clone <your-repo>`\n2. `pip install flask flask-mail werkzeug gunicorn email-validator`\n3. `export SESSION_SECRET=\"your-secret-key\"`\n4. `python main.py`\n5. Open http://localhost:5000\n\n---\n\n**🚀 Ready to Deploy?**\nThis application is production-ready for small to medium-scale deployments. The in-memory storage makes it perfect for demos, prototypes, and small businesses. For larger scale applications, consider implementing a persistent database solution.\n\n**📧 Need Help?**\nIf you encounter issues not covered in this guide, check the platform-specific documentation or reach out to their support teams. Most hosting platforms have excellent documentation and responsive support communities.\n\n**🔄 Keep Updated:**\nWeb technologies evolve rapidly. Check for updates to Python, Flask, and your hosting platform regularly to ensure security and performance.","size_bytes":23586},"init_data.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nInitialize the database with sample data for NIKITA RASOI & BAKES\n\"\"\"\n\nfrom app import app, db\nfrom models import User, Product, Order, Review, Address, OrderItem, VisitorLog\nfrom werkzeug.security import generate_password_hash\nfrom datetime import datetime, timedelta\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef init_database():\n    \"\"\"Initialize database with sample data\"\"\"\n    with app.app_context():\n        # Drop all tables and recreate them\n        db.drop_all()\n        db.create_all()\n        \n        # Create admin user\n        admin_user = User(\n            username='admin',\n            email='admin@nikitarasoi.com',\n            password_hash=generate_password_hash('admin123'),\n            is_admin=True\n        )\n        db.session.add(admin_user)\n        \n        # Create some regular users\n        users = [\n            User(username='john_doe', email='john@example.com', password_hash=generate_password_hash('password123')),\n            User(username='sarah_baker', email='sarah@example.com', password_hash=generate_password_hash('password123')),\n            User(username='mike_sweet', email='mike@example.com', password_hash=generate_password_hash('password123'))\n        ]\n        \n        for user in users:\n            db.session.add(user)\n        \n        # Create sample products (in INR)\n        products = [\n            Product(\n                name='Chocolate Truffle Cake',\n                description='Rich and decadent chocolate cake with chocolate ganache',\n                price=850.00,\n                category='Cakes',\n                image_url='https://cdn.pixabay.com/photo/2016/11/22/18/54/cake-1851142_1280.jpg',\n                stock=15\n            ),\n            Product(\n                name='Vanilla Bean Cupcakes',\n                description='Classic vanilla cupcakes with buttercream frosting',\n                price=120.00,\n                category='Cupcakes',\n                image_url='https://cdn.pixabay.com/photo/2018/04/11/16/39/cupcake-3309789_1280.jpg',\n                stock=24\n            ),\n            Product(\n                name='Fresh Strawberry Tart',\n                description='Buttery pastry shell filled with pastry cream and fresh strawberries',\n                price=450.00,\n                category='Tarts',\n                image_url='https://cdn.pixabay.com/photo/2017/05/01/05/18/pastry-2274750_1280.jpg',\n                stock=8\n            ),\n            Product(\n                name='Artisan Sourdough Bread',\n                description='Freshly baked sourdough with a perfect crust',\n                price=180.00,\n                category='Bread',\n                image_url='https://cdn.pixabay.com/photo/2017/06/23/23/58/bread-2434370_1280.jpg',\n                stock=12\n            ),\n            Product(\n                name='Red Velvet Cake',\n                description='Classic red velvet cake with cream cheese frosting',\n                price=920.00,\n                category='Cakes',\n                image_url='https://cdn.pixabay.com/photo/2018/02/21/03/19/cake-3169966_1280.jpg',\n                stock=10\n            ),\n            Product(\n                name='Chocolate Chip Cookies',\n                description='Homemade chocolate chip cookies - pack of 12',\n                price=280.00,\n                category='Cookies',\n                image_url='https://cdn.pixabay.com/photo/2014/07/08/12/34/cookies-386761_1280.jpg',\n                stock=30\n            ),\n            Product(\n                name='Lemon Meringue Pie',\n                description='Tangy lemon curd topped with fluffy meringue',\n                price=650.00,\n                category='Pies',\n                image_url='https://cdn.pixabay.com/photo/2017/01/11/11/33/cake-1971552_1280.jpg',\n                stock=6\n            ),\n            Product(\n                name='Cinnamon Rolls',\n                description='Warm cinnamon rolls with glaze - pack of 6',\n                price=320.00,\n                category='Pastries',\n                image_url='https://cdn.pixabay.com/photo/2016/03/27/22/16/cinnamon-roll-1284543_1280.jpg',\n                stock=18\n            ),\n            Product(\n                name='Black Forest Cake',\n                description='Chocolate sponge with cherries and whipped cream',\n                price=1050.00,\n                category='Cakes',\n                image_url='https://cdn.pixabay.com/photo/2017/01/11/11/33/cake-1971555_1280.jpg',\n                stock=8\n            ),\n            Product(\n                name='Apple Pie',\n                description='Traditional apple pie with lattice crust',\n                price=580.00,\n                category='Pies',\n                image_url='https://cdn.pixabay.com/photo/2016/03/05/20/02/apple-pie-1238510_1280.jpg',\n                stock=12\n            ),\n            Product(\n                name='Blueberry Muffins',\n                description='Fresh blueberry muffins - pack of 6',\n                price=240.00,\n                category='Muffins',\n                image_url='https://cdn.pixabay.com/photo/2014/07/08/12/35/muffin-386646_1280.jpg',\n                stock=20\n            ),\n            Product(\n                name='Cheesecake',\n                description='New York style cheesecake with berry compote',\n                price=750.00,\n                category='Cakes',\n                image_url='https://cdn.pixabay.com/photo/2017/05/12/08/29/cheesecake-2306966_1280.jpg',\n                stock=9\n            )\n        ]\n        \n        for product in products:\n            db.session.add(product)\n        \n        # Commit users and products first\n        db.session.commit()\n        \n        # Create sample addresses\n        addresses = [\n            Address(\n                user_id=users[0].id,\n                name='John Doe',\n                street='123 Main Street',\n                city='Mumbai',\n                state='Maharashtra',\n                zip_code='400001'\n            ),\n            Address(\n                user_id=users[1].id,\n                name='Sarah Baker',\n                street='456 Oak Avenue',\n                city='Delhi',\n                state='Delhi',\n                zip_code='110001'\n            )\n        ]\n        \n        for address in addresses:\n            db.session.add(address)\n        \n        # Create sample orders\n        sample_order = Order(\n            user_id=users[0].id,\n            total=1170.00,\n            status='delivered',\n            created_at=datetime.utcnow() - timedelta(days=2)\n        )\n        db.session.add(sample_order)\n        db.session.commit()\n        \n        # Create order items\n        order_items = [\n            OrderItem(\n                order_id=sample_order.id,\n                product_id=products[0].id,  # Chocolate Truffle Cake\n                quantity=1,\n                price=products[0].price\n            ),\n            OrderItem(\n                order_id=sample_order.id,\n                product_id=products[5].id,  # Chocolate Chip Cookies\n                quantity=1,\n                price=products[5].price\n            )\n        ]\n        \n        for item in order_items:\n            db.session.add(item)\n        \n        # Create sample reviews\n        reviews = [\n            Review(\n                product_id=products[0].id,\n                user_id=users[0].id,\n                rating=5,\n                comment='Amazing chocolate cake! Rich and delicious.',\n                created_at=datetime.utcnow() - timedelta(days=1)\n            ),\n            Review(\n                product_id=products[1].id,\n                user_id=users[1].id,\n                rating=4,\n                comment='Lovely vanilla cupcakes, kids loved them!',\n                created_at=datetime.utcnow() - timedelta(hours=12)\n            ),\n            Review(\n                product_id=products[0].id,\n                user_id=users[2].id,\n                rating=5,\n                comment='Best chocolate cake in the city!',\n                created_at=datetime.utcnow() - timedelta(hours=6)\n            )\n        ]\n        \n        for review in reviews:\n            db.session.add(review)\n        \n        # Create sample visitor logs\n        for i in range(50):\n            visitor_log = VisitorLog(\n                ip_address=f'192.168.1.{i + 100}',\n                user_agent='Mozilla/5.0 (compatible sample)',\n                timestamp=datetime.utcnow() - timedelta(hours=i)\n            )\n            db.session.add(visitor_log)\n        \n        # Commit all changes\n        db.session.commit()\n        \n        logging.info(\"Database initialized successfully!\")\n        logging.info(f\"Created {len(users) + 1} users (including admin)\")\n        logging.info(f\"Created {len(products)} products\")\n        logging.info(f\"Created {len(addresses)} addresses\")\n        logging.info(f\"Created 1 sample order with {len(order_items)} items\")\n        logging.info(f\"Created {len(reviews)} reviews\")\n        logging.info(\"Created 50 visitor log entries\")\n        \n        print(\"Database initialization complete!\")\n        print(\"Admin login: admin / admin123\")\n        print(\"Sample user login: john_doe / password123\")\n\nif __name__ == '__main__':\n    init_database()","size_bytes":9279}}}